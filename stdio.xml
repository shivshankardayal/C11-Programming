<?xml version="1.0" encoding="UTF-8"?>
<d:chapter version="5.0" xmlns:d="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2003/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:mml="http://www.w3.org/1998/Math/MathML">
  <?dbhtml filename="stdio/index.html" ?>
  <d:title>Input/Output &amp;lt;stdio.h></d:title>
  <d:sect1>
    <d:title>Introduction</d:title>
    <d:para>The header <d:code>&amp;lt;stdio.h></d:code> declares three types,
    several macros, and many functions for performing input and
    output.</d:para>
    <d:para>The types declared are <d:code>size_t</d:code> (described in Common
    definitions &amp;lt;stddef.h>);</d:para>
    <d:blockquote><d:para><d:code>FILE</d:code></d:para></d:blockquote>
    <d:para>which is an object type capable of recording all the information
    needed to control a stream, including its file position indicator, a
    pointer to its associated buffer (if any), an error indicator that records
    whether a read/write error has occurred, and an end-of-file indicator that
    records whether the end of the file has been reached; and</d:para>
    <d:blockquote><d:para><d:code>fpos_t</d:code></d:para></d:blockquote>
    <d:para>which is an object type other than an array type capable of
    recording all the information needed to specify uniquely every position
    within a file.</d:para>
    <d:para>The macros are NULL (described in Common definitions
    &amp;lt;stddef.h>);</d:para>
    <d:blockquote>
      <d:para><d:code>_IOFBF</d:code></d:para>
      <d:para><d:code>_IOLBF</d:code></d:para>
      <d:para><d:code>_IONBF</d:code></d:para>
    </d:blockquote>
    <d:para>which expand to integer constant expressions with distinct values,
    suitable for use as the third argument to the <d:code>setvbuf</d:code>
    function;</d:para>
    <d:blockquote><d:para><d:code>BUFSIZ</d:code></d:para></d:blockquote>
    <d:para>which expands to an integer constant expression that is the size of
    the buffer used by the <d:code>setbuf</d:code> function;</d:para>
    <d:blockquote><d:para><d:code>EOF</d:code></d:para></d:blockquote>
    <d:para>which expands to an integer constant expression, with type int and
    a negative value, that is returned by several functions to indicate
    end-of-file, that is, no more input from a stream;</d:para>
    <d:blockquote><d:para><d:code>FOPEN_MAX</d:code></d:para></d:blockquote>
    <d:para>which expands to an integer constant expression that is the minimum 
    number of files that the implementation guarantees can be open
    simultaneously;</d:para>
    <d:blockquote><d:para><d:code>FILENAME_MAX</d:code></d:para></d:blockquote>
    <d:para>which expands to an integer constant expression that is the size
    needed for an array of char large enough to hold the longest file name
    string that the implementation guarantees can be
    opened;<d:footnote><d:para>If the implementation imposes no practical limit
    on the length of file name strings, the value of
    <d:code>FILENAME_MAX</d:code> should instead be the recommended size of an
    array intended to hold a file name string. Of course, file name string
    contents are subject to other system-specific constraints; therefore all
    possible strings of length <d:code>FILENAME_MAX</d:code> cannot be expected
    to be opened successfully.</d:para></d:footnote></d:para>
    <d:blockquote><d:para><d:code>L_tmpnam</d:code></d:para></d:blockquote>
    <d:para>which expands to an integer constant expression that is the size
    needed for an array of char large enough to hold a temporary file name
    string generated by the <d:code>tmpnam</d:code> function;</d:para>
    <d:blockquote>
      <d:para><d:code>stderr</d:code></d:para>
      <d:para><d:code>stdin</d:code></d:para>
      <d:para><d:code>stdout</d:code></d:para>
    </d:blockquote>
    <d:para>which are expressions of type "pointer to <d:code>FILE</d:code>"
    that point to the <d:code>FILE</d:code> objects associated, respectively,
    with the standard error, input, and output streams.</d:para>
    <d:para>The header <d:code>&amp;lt;wchar.h></d:code> declares a number of
    functions useful for wide character input and output. The wide character
    input/output functions described in that subclause provide operations
    analogous to most of those described here, except that the fundamental
    units internal to the program are wide characters. The external
    representation (in the file) is a sequence of "generalized" multibyte
    characters, as described further in Files.</d:para>
    <d:para>The input/output functions are given the following collective
    terms:</d:para>
    <d:itemizedlist>
      <d:listitem>
	<d:para>The <d:emphasis role="italic">wide character input
	functions</d:emphasis> - those functions described in Extended
	multibyte and wide character utilities &amp;lt;wchar.h> that perform
	input into wide characters and wide strings: <d:code>fgetwc, fgetws,
	getwc, getwchar, fwscanf, wscanf, vfwscanf</d:code> and
	<d:code>vwscanf</d:code>.</d:para>
      </d:listitem>
      <d:listitem>
	<d:para>The <d:emphasis role="italic">wide character output
	functions</d:emphasis> - those functions described in Extended
	multibyte and wide character utilities &amp;lt;wchar.h> that perform
	output from wide characters and wide strings: <d:code>fputwc, fputws,
	putwc, putwchar, fwprintf, wprintf, vfwprintf</d:code> and
	<d:code>vwprintf</d:code>.</d:para>
      </d:listitem>
      <d:listitem>
	<d:para>The <d:emphasis role="italic">wide character input/output
	functions</d:emphasis> the union of the <d:code>ungetwc</d:code>
	function, the wide character input functions, and the wide character
	output functions.</d:para>
      </d:listitem>
      <d:listitem>
	<d:para>The <d:emphasis role="italic">byte input/output
	functions</d:emphasis> - those functions described in this subclause
	that perform input/output: <d:code>fgetc, fgets, fprintf, fputc, fputs,
	fread, fscanf, fwrite, getc, getchar, gets, perror, printf, putc,
	putchar, puts, scanf, ungetc, vfprintf, vfscanf, vprintf</d:code> and
	<d:code>vscanf</d:code>.</d:para>
      </d:listitem>
    </d:itemizedlist>
  </d:sect1>
  <d:sect1>
    <d:title>Streams</d:title>
    <d:para>Input and output, whether to or from physical devices such as
    terminals and tape drives, or whether to or from files supported on
    structured storage devices, are mapped into logical data streams, whose
    properties are more uniform than their various inputs and outputs. Two
    forms of mapping are supported, for text streams and for binary
    streams.<d:footnote><d:para>An implementation need not distinguish between
    text streams and binary streams. In such an implementation, there need be
    no new-line characters in a text stream nor any limit to the length of a
    line.</d:para></d:footnote></d:para>
    <d:para>A text stream is an ordered sequence of characters composed into
    lines, each line consisting of zero or more characters plus a terminating
    new-line character. Whether the last line requires a terminating new-line
    character is implementation-defined. Characters may have to be added,
    altered, or deleted on input and output to conform to differing conventions
    for representing text in the host environment. Thus, there need not be a
    oneto- one correspondence between the characters in a stream and those in
    the external representation. Data read in from a text stream will
    necessarily compare equal to the data that were earlier written out to that
    stream only if: the data consist only of printing characters and the
    control characters horizontal tab and new-line; no new-line character is
    immediately preceded by space characters; and the last character is a
    new-line character. Whether space characters that are written out
    immediately before a new-line character appear when read in is
    implementation-defined.</d:para>
    <d:para>A binary stream is an ordered sequence of characters that can
    transparently record internal data. Data read in from a binary stream shall
    compare equal to the data that were earlier written out to that stream,
    under the same implementation. Such a stream may, however, hav e an
    implementation-defined number of null characters appended to the end of the
    stream.</d:para>
    <d:para>Each stream has an orientation. After a stream is associated with
    an external file, but before any operations are performed on it, the stream
    is without orientation. Once a wide character input/output function has
    been applied to a stream without orientation, the stream becomes a
    <d:emphasis role="italic">wide-oriented</d:emphasis> stream. Similarly,
    once a byte input/output function has been applied to a stream without
    orientation, the stream becomes a byte-oriented stream. Only a call to the
    <d:code>freopen</d:code> function or the fwide function can otherwise alter
    the orientation of a stream. (A successful call to <d:code>freopen</d:code>
    removes any orientation.)<d:footnote><d:para>The three predefined streams
    <d:code>stdin, stdout</d:code> and <d:code>stderr</d:code> are unoriented
    at program startup.</d:para></d:footnote></d:para>
    <d:para>Byte input/output functions shall not be applied to a wide-oriented
    stream and wide character input/output functions shall not be applied to a
    byte-oriented stream. The remaining stream operations do not affect, and
    are not affected by, a stream's orientation, except for the following
    additional restrictions:</d:para>
    <d:itemizedlist>
      <d:listitem>
	<d:para>Binary wide-oriented streams have the file-positioning
	restrictions ascribed to both text and binary streams.</d:para>
      </d:listitem>
      <d:listitem>
	<d:para>For wide-oriented streams, after a successful call to a
	file-positioning function that leaves the file position indicator prior
	to the end-of-file, a wide character output function can overwrite a
	partial multibyte character; any file contents beyond the byte(s)
	written are henceforth indeterminate.</d:para>
      </d:listitem>
    </d:itemizedlist>
    <d:para>Each wide-oriented stream has an associated
    <d:code>mbstate_t</d:code> object that stores the current parse state of
    the stream. A successful call to fgetpos stores a representation of the
    value of this mbstate_t object as part of the value of the
    <d:code>fpos_t</d:code> object. A later successful call to fsetpos using
    the same stored <d:code>fpos_t</d:code> value restores the value of the
    associated <d:code>mbstate_t</d:code> object as well as the position within
    the controlled stream.</d:para>
    <d:para><d:emphasis role="bold">Environmental limits</d:emphasis></d:para>
    <d:para>An implementation shall support text files with lines containing at
    least 254 characters, including the terminating new-line character. The
    value of the macro <d:code>BUFSIZ</d:code> shall be at least 256.</d:para>
  </d:sect1>
  <d:sect1>
    <d:title>Files</d:title>
    <d:para>A stream is associated with an external file (which may be a
    physical device) by opening a file, which may involve <d:emphasis
    role="italic">creating</d:emphasis> a new file. Creating an existing file
    causes its former contents to be discarded, if necessary. If a file can
    support positioning requests (such as a disk file, as opposed to a
    terminal), then a file position indicator associated with the stream is
    positioned at the start (character number zero) of the file, unless the
    file is opened with append mode in which case it is implementation-defined
    whether the file <d:emphasis role="italic">position</d:emphasis> indicator
    is initially positioned at the beginning or the end of the file. The file
    position indicator is maintained by subsequent reads, writes, and
    positioning requests, to facilitate an orderly progression through the
    file.</d:para>
    <d:para>Binary files are not truncated, except as defined in The fopen
    function. Whether a write on a text stream causes the associated file to be
    truncated beyond that point is implementation-defined.</d:para>
    <d:para>When a stream is <d:emphasis role="italic">unbuffered</d:emphasis>,
    characters are intended to appear from the source or at the destination as
    soon as possible. Otherwise characters may be accumulated and transmitted
    to or from the host environment as a block. When a stream is <d:emphasis
    role="italic">fully buffered</d:emphasis>, characters are intended to be 
    transmitted to or from the host environment as a block when a buffer is 
    filled. When a stream is <d:emphasis role="italic">line
    buffered</d:emphasis>, characters are intended to be transmitted to or from
    the host environment as a block when a new-line character is
    encountered. Furthermore, characters are intended to be transmitted as a
    block to the host environment when a buffer is filled, when input is
    requested on an unbuffered stream, or when input is requested on a line
    buffered stream that requires the transmission of characters from the host
    environment. Support for these characteristics is implementation-defined,
    and may be affected via the setbuf and setvbuf functions.</d:para>
    <d:para>A file may be disassociated from a controlling stream by
    <d:code>closing</d:code> the file. Output streams are flushed (any
    unwritten buffer contents are transmitted to the host environment) before
    the stream is disassociated from the file. The value of a pointer to a
    <d:code>FILE</d:code> object is indeterminate after the associated file is
    closed (including the standard text streams). Whether a file of zero length
    (on which no characters have been written by an output stream) actually
    exists is implementation-defined.</d:para>
    <d:para>The file may be subsequently reopened, by the same or another
    program execution, and its contents reclaimed or modified (if it can be
    repositioned at its start). If the <d:code>main</d:code> function returns
    to its original caller, or if the <d:code>exit</d:code> function is called,
    all open files are closed (hence all output streams are flushed) before
    program termination. Other paths to program termination, such as calling
    the abort function, need not close all files properly.</d:para>
    <d:para>The address of the <d:code>FILE</d:code> object used to control a
    stream may be significant; a copy of a <d:code>FILE</d:code> object need
    not serve in place of the original.</d:para>
    <d:para>At program startup, three text streams are predefined and need not
    be opened explicitly - <d:emphasis role="italic">standard
    input</d:emphasis> (for reading conventional input), <d:emphasis
    role="italic">standard output</d:emphasis> (for writing conventional
    output) and standard error (for writing diagnostic output). As initially
    opened, the <d:emphasis role="italic">y</d:emphasis> stream is not fully
    buffered; the standard input and standard output streams are fully buffered
    if and only if the stream can be determined not to refer to an interactive
    device.</d:para>
    <d:para>Functions that open additional (nontemporary) files require a
    <d:emphasis role="italic">file name</d:emphasis>, which is a string. The
    rules for composing valid file names are implementation-defined. Whether
    the same file can be simultaneously open multiple times is also
    implementation-defined.</d:para>
    <d:para>Although both text and binary wide-oriented streams are
    conceptually sequences of wide characters, the external file associated
    with a wide-oriented stream is a sequence of multibyte characters,
    generalized as follows:</d:para>
    <d:itemizedlist>
      <d:listitem>
	<d:para>Multibyte encodings within files may contain embedded null
	bytes (unlike multibyte encodings valid for use internal to the
	program).</d:para>
      </d:listitem>
      <d:listitem>
	<d:para>A file need not begin nor end in the initial shift
	state.<d:footnote><d:para>Setting the file position indicator to
	end-of-file, as with <d:code>fseek(file, 0, SEEK_END)</d:code>, has
	undefined behavior for a binary stream (because of possible trailing
	null characters) or for any stream with state-dependent encoding that
	does not assuredly end in the initial shift
	state.</d:para></d:footnote></d:para>
      </d:listitem>
    </d:itemizedlist>
    <d:para>Moreover, the encodings used for multibyte characters may differ
    among files. Both the nature and choice of such encodings are
    implementation-defined.</d:para>
    <d:para>The wide character input functions read multibyte characters from
    the stream and convert them to wide characters as if they were read by
    successive calls to the <d:code>fgetwc</d:code> function. Each conversion
    occurs as if by a call to the <d:code>mbrtowc</d:code> function, with the
    conversion state described by the stream's own <d:code>mbstate_t</d:code>
    object. The byte input functions read characters from the stream as if by
    successive calls to the <d:code>fgetc</d:code> function.</d:para>
    <d:para>The wide character output functions convert wide characters to
    multibyte characters and write them to the stream as if they were written
    by successive calls to the <d:code>fputwc</d:code> function. Each
    conversion occurs as if by a call to the wcrtomb function, with the
    conversion state described by the stream's own <d:code>mbstate_t</d:code>
    object. The byte output functions write characters to the stream as if by
    successive calls to the <d:code>fputc</d:code> function.</d:para>
    <d:para>In some cases, some of the byte input/output functions also perform
    conversions between multibyte characters and wide characters. These
    conversions also occur as if by calls to the <d:code>mbrtowc</d:code> and
    <d:code>wcrtomb</d:code> functions.</d:para>
    <d:para>An <d:emphasis role="italic">encoding error</d:emphasis> occurs if
    the character sequence presented to the underlying <d:code>mbrtowc</d:code>
    function does not form a valid (generalized) multibyte character, or if the
    code value passed to the underlying <d:code>wcrtomb</d:code> does not
    correspond to a valid (generalized) multibyte character. The wide character
    input/output functions and the byte input/output functions store the value
    of the macro <d:code>EILSEQ</d:code> in errno if and only if an encoding
    error occurs.</d:para>
    <d:para><d:emphasis role="bold">Enviromental limits</d:emphasis></d:para>
    <d:para>The value of <d:code>FOPEN_MAX</d:code> shall be at least eight,
    including the three standard text streams.</d:para>
    <d:para><d:emphasis role="bold">Forward references:</d:emphasis> the
    <d:code>exit</d:code> function (The exit function), the
    <d:code>fgetc</d:code> function (The fgetc function), the
    <d:code>fopen</d:code> function (The fopen function), the
    <d:code>fputc</d:code> function (The fputc function), the
    <d:code>setbuf</d:code> function (The setbuf function), the
    <d:code>setvbuf</d:code> function (The setvbuf function), the
    <d:code>fgetwc</d:code> function (The fgetwc function), the
    <d:code>fputwc</d:code> function (The fputwc function), conversion state
    (Extended multibyte/wide character conversion utilities), the
    <d:code>mbrtowc</d:code> function (The mbrtowc function), the
    <d:code>wcrtomb</d:code> function (The wcrtomb function)</d:para>
  </d:sect1>
  <d:sect1>
    <d:title>Operations on files</d:title>
    <d:sect2>
      <d:title>The remove function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer">#include &lt;stdio.h>
int remove(const char *filename);</d:programlisting>
      <d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
      <d:para>The <d:code>remove</d:code> function causes the file whose name
      is the string pointed to by filename to be no longer accessible by that
      name. A subsequent attempt to open that file using that name will fail,
      unless it is created anew. If the file is open, the behavior of the
      <d:code>remove</d:code> function is implementation-defined.</d:para>
      <d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
      <d:para>The <d:code>remove</d:code> function returns zero if the
      operation succeeds, nonzero if it fails.</d:para> 
    </d:sect2>
    <d:sect2>
      <d:title>The rename function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer">#include &lt;stdio.h>
int rename(const char *old, const char *new);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>rename</d:code> function causes the file whose name is the
string pointed to by old to be henceforth known by the name given by the string
pointed to by new. The file named old is no longer accessible by that name. If
a file named by the string pointed to by new exists prior to the call to the
<d:code>rename</d:code> function, the behavior is
implementation-defined.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>rename</d:code> function returns zero if the operation
succeeds, nonzero if it fails,<d:footnote><d:para>Among the reasons the
implementation may cause the <d:code>rename</d:code> function to fail are that
the file is open or that it is necessary to copy its contents to effectuate its
renaming.</d:para></d:footnote> in which case if the file existed previously it
is still known by its original name.</d:para>
    </d:sect2>
    <d:sect2>
      <d:title>The tmpfile function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer">#include &lt;stdio.h>
FILE *tmpfile(void);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>tmpfile</d:code> function creates a temporary binary file
that is different from any other existing file and that will automatically be
removed when it is closed or at program termination. If the program terminates
abnormally, whether an open temporary file is removed is
implementation-defined. The file is opened for update with "wb+" mode.</d:para>
<d:para><d:emphasis role="bold">Recommended Practice</d:emphasis></d:para>
<d:para>It should be possible to open at least <d:code>TMP_MAX</d:code>
temporary files during the lifetime of the program (this limit may be shared
with <d:code>tmpnam</d:code>) and there should be no limit on the number
simultaneously open other than this limit and any limit on the number of open
files (<d:code>FOPEN_MAX</d:code>).</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>tmpfile</d:code> function returns a pointer to the stream
of the file that it created. If the file cannot be created, the
<d:code>tmpfile</d:code> function returns a null pointer.</d:para>
<d:para><d:code>Forward references:</d:code> the <d:code>fopen</d:code>
function (The fopen function).</d:para>
    </d:sect2>
    <d:sect2>
      <d:title>The tmpnam function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer">#include &lt;stdio.h>
char *tmpnam(char *s);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>tmpnam</d:code> function generates a string that is a valid
file name and that is not the same as the name of an existing
file.<d:footnote><d:para>Files created using strings generated by the tmpnam
function are temporary only in the sense that their names should not collide
with those generated by conventional naming rules for the implementation. It is
still necessary to use the remove function to remove such files when their use
is ended, and before program termination.</d:para></d:footnote> The function is
potentially capable of generating <d:code>TMP_MAX</d:code> different strings,
but any or all of them may already be in use by existing files and thus not be
suitable return values.</d:para>
<d:para>The <d:code>tmpnam</d:code> function generates a different string each
time it is called.</d:para>
<d:para>The implementation shall behave as if no library function calls the
<d:code>tmpnam</d:code> function.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>If no suitable string can be generated, the <d:code>tmpnam</d:code>
function returns a null pointer. Otherwise, if the argument is a null pointer,
the tmpnam function leaves its result in an internal static object and returns
a pointer to that object (subsequent calls to the tmpnam function may modify
the same object). If the argument is not a null pointer, it is assumed to point
to an array of at least <d:code>L_tmpnam</d:code> chars; the
<d:code>tmpnam</d:code> function writes its result in that array and returns
the argument as its value.</d:para>
<d:para><d:emphasis role="bold">Environemental limits</d:emphasis></d:para>
<d:para>The value of the macro <d:code>TMP_MAX</d:code> shall be at least
25.</d:para>
    </d:sect2>
  </d:sect1>
  <d:sect1>
    <d:title>File acces functions</d:title>
    <d:sect2>
      <d:title>The fclose functions</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer">#include &lt;stdio.h>
int fclose(FILE *stream);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>A successful call to the <d:code>fclose</d:code> function causes the
stream pointed to by stream to be flushed and the associated file to be
closed. Any unwritten buffered data for the stream are delivered to the host
environment to be written to the file; any unread buffered data are
discarded. Whether or not the call succeeds, the stream is disassociated from
the file and any buffer set by the <d:code>setbuf</d:code> or
<d:code>setvbuf</d:code> function is disassociated from the stream (and
deallocated if it was automatically allocated).</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>fclose</d:code> function returns zero if the stream was
successfully closed, or <d:code>EOF</d:code> if any errors were
detected.</d:para>
    </d:sect2>
    <d:sect2>
      <d:title>The fflush function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer">#include &lt;stdio.h>
int fflush(FILE *stream);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>If stream points to an output stream or an update stream in which the
most recent operation was not input, the <d:code>fflush</d:code> function
causes any unwritten data for that stream to be delivered to the host
environment to be written to the file; otherwise, the behavior is
undefined.</d:para>
<d:para>If stream is a null pointer, the fflush function performs this flushing
action on all streams for which the behavior is defined above.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>fflush</d:code> function sets the error indicator for the
stream and returns EOF if a write error occurs, otherwise it returns
zero.</d:para>
<d:para><d:code>Forward references:</d:code> the <d:code>fopen</d:code>
function (The fopen function).</d:para>
    </d:sect2>
    <d:sect2>
      <d:title>The fopen function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer">#include &lt;stdio.h>
FILE *fopen(const char * restrict filename, const char * restrict mode);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>fopen</d:code> function opens the file whose name is the
string pointed to by filename, and associates a stream with it.</d:para>
<d:para>The argument mode points to a string. If the string is one of the
following, the file is open in the indicated mode. Otherwise, the behavior is
undefined.<d:footnote><d:para>If the string begins with one of the above
sequences, the implementation might choose to ignore the remaining characters,
or it might use them to select different kinds of a file (some of which might
not conform to the properties in Streams).</d:para></d:footnote></d:para>
<d:blockquote>
  <d:para><d:code>r</d:code> open test file for reading</d:para>
  <d:para><d:code>w</d:code> truncate zero length or create text file for writing</d:para>
  <d:para><d:code>a</d:code> append; open or create text file for writing at end-of-file</d:para>
  <d:para><d:code>rb</d:code> open binary file for reading</d:para>
  <d:para><d:code>wb</d:code> truncate to zero length or create binary file for writing</d:para>
  <d:para><d:code>ab</d:code> append; open or create binary file for writing at end-of-file</d:para>
  <d:para><d:code>r+</d:code> open text file for update (reading and writing)</d:para>
  <d:para><d:code>w+</d:code> truncate to zero length or create text file for update</d:para>
  <d:para><d:code>a+</d:code> append; open or create text file for update, writing at end-of-file</d:para>
  <d:para><d:code>r+b</d:code> or <d:code>rb+</d:code> open binary file for update (reading and writing)</d:para>
  <d:para><d:code>w+b</d:code> or <d:code>wb+</d:code> truncate to zero length or create binary file for update</d:para>
  <d:para><d:code>a+b</d:code> or <d:code>ab+</d:code> append; open or create binary file for update, writing at end-of-file</d:para>
</d:blockquote>
<d:para>Opening a file with read mode ('<d:code>r</d:code>' as the first
character in the mode argument) fails if the file does not exist or cannot be
read.</d:para>
<d:para>Opening a file with append mode ('<d:code>a</d:code>' as the first
character in the mode argument) causes all subsequent writes to the file to be
forced to the then current end-of-file, regardless of intervening calls to the
fseek function. In some implementations, opening a binary file with append mode
('<d:code>b</d:code>' as the second or third character in the above list of
mode argument values) may initially position the file position indicator for
the stream beyond the last data written, because of null character
padding.</d:para>
<d:para>When a file is opened with update mode ('<d:code>+</d:code>' as the
second or third character in the above list of mode argument values), both
input and output may be performed on the associated stream. However, output
shall not be directly followed by input without an intervening call to the
<d:code>fflush</d:code> function or to a file positioning function
(<d:code>fseek, fsetpos</d:code> or <d:code>rewind</d:code>), and input shall
not be directly followed by output without an intervening call to a file
positioning function, unless the input operation encounters
end-of-file. Opening (or creating) a text file with update mode may instead
open (or create) a binary stream in some implementations.</d:para>
<d:para>When opened, a stream is fully buffered if and only if it can be
determined not to refer to an interactive device. The error and end-of-file
indicators for the stream are cleared.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>fopen</d:code> function returns a pointer to the object
controlling the stream. If the open operation fails, fopen returns a null
pointer.</d:para>
<d:para><d:emphasis role="bold">Forward references:</d:emphasis> file
positioning functions (File positioning functions).</d:para>
    </d:sect2>
    <d:sect2>
      <d:title>The freopen function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer">#include &lt;stdio.h>
FILE *freopen(const char * restrict filename, const char * restrict mode,
              FILE * restrict stream);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>freopen</d:code> function opens the file whose name is the
string pointed to by filename and associates the stream pointed to by stream
with it. The mode argument is used just as in the <d:code>fopen</d:code>
function.<d:footnote><d:para>The primary use of the <d:code>freopen</d:code>
function is to change the file associated with a standard text stream
(<d:code>stderr, stdin</d:code> or <d:code>stdout</d:code>), as those
identifiers need not be modifiable lvalues to which the value returned by the
fopen function may be assigned.</d:para></d:footnote></d:para>
<d:para>If filename is a null pointer, the <d:code>freopen</d:code> function
attempts to change the mode of the stream to that specified by mode, as if the
name of the file currently associated with the stream had been used. It is
implementation-defined which changes of mode are permitted (if any), and under
what circumstances.</d:para>
<d:para>The <d:code>freopen</d:code> function first attempts to close any file
that is associated with the specified stream. Failure to close the file is
ignored. The error and end-of-file indicators for the stream are
cleared.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>freopen</d:code> function returns a null pointer if the
open operation fails. Otherwise, <d:code>freopen</d:code> returns the value of
stream.</d:para>
    </d:sect2>
    <d:sect2>
      <d:title>The setbuf function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer">#include &lt;stdio.h>
void setbuf(FILE * restrict stream, char * restrict buf);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>Except that it returns no value, the <d:code>setbuf</d:code> function
is equivalent to the <d:code>setvbuf</d:code> function invoked with the values
<d:code>_IOFBF</d:code> for mode and <d:code>BUFSIZ</d:code> for size, or (if
<d:code>buf</d:code> is a null pointer), with the value <d:code>_IONBF</d:code>
for mode.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>setbuf</d:code> function returns no value.</d:para>
<d:para><d:emphasis role="bold">Forward references:</d:emphasis> the
<d:code>setvbuf</d:code> function (The setvbuf function).</d:para>
    </d:sect2>
    <d:sect2>
      <d:title>The setvbuf function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer">#include &lt;stdio.h>
int setvbuf(FILE * restrict stream, char * restrict buf, int mode, size_t size);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>setvbuf</d:code> function may be used only after the stream
pointed to by stream has been associated with an open file and before any other
operation (other than an unsuccessful call to <d:code>setvbuf</d:code>) is
performed on the stream. The argument mode determines how stream will be
buffered, as follows: <d:code>_IOFBF</d:code> causes input/output to be fully
buffered; <d:code>_IOLBF</d:code> causes input/output to be line buffered;
<d:code>_IONBF</d:code> causes input/output to be unbuffered. If
<d:code>buf</d:code> is not a null pointer, the array it points to may be used
instead of a buffer allocated by the <d:code>setvbuf</d:code>
function<d:footnote><d:para>The buffer has to have a lifetime at least as great
as the open stream, so the stream should be closed before a buffer that has
automatic storage duration is deallocated upon block
exit.</d:para></d:footnote> and the argument size specifies the size of the
array; otherwise, size may determine the size of a buffer allocated by the
<d:code>setvbuf</d:code> function. The contents of the array at any time are
indeterminate.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>setvbuf</d:code> function returns zero on success, or
nonzero if an invalid value is given for mode or if the request cannot be
honored.</d:para>
    </d:sect2>
  </d:sect1>
  <d:sect1>
    <d:title>Formatted input/output function</d:title>
    <d:para>The formatted input/output functions shall behave as if there is a
    sequence point after the actions associated with each
    specifier.<d:footnote><d:para>The <d:code>fprintf</d:code> functions
    perform writes to memory for the <d:code>%n</d:code>
    specifier.</d:para></d:footnote></d:para>
    <d:sect2>
      <d:title>The fprintf function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer">#include &lt;stdio.h>
int fprintf(FILE * restrict stream, const char * restrict format, ...);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>fprintf</d:code> function writes output to the stream
pointed to by stream, under control of the string pointed to by format that
specifies how subsequent arguments are converted for output. If there are
insufficient arguments for the format, the behavior is undefined. If the format
is exhausted while arguments remain, the excess arguments are evaluated (as
always) but are otherwise ignored. The <d:code>fprintf</d:code> function
returns when the end of the format string is encountered.</d:para>
<d:para>The format shall be a multibyte character sequence, beginning and
ending in its initial shift state. The format is composed of zero or more
directives: ordinary multibyte characters (not <d:code>%</d:code>), which are
copied unchanged to the output stream; and conversion pecifications, each of
which results in fetching zero or more subsequent arguments, converting them,
if applicable, according to the corresponding conversion specifier, and then
writing the result to the output stream.</d:para>
<d:para>Each conversion specification is introduced by the character
<d:code>%</d:code>. After the <d:code>%</d:code>, the following appear in
sequence:</d:para>
<d:itemizedlist>
  <d:listitem>
    <d:para>Zero or more flags (in any order) that modify the meaning of the conversion specification.</d:para>
  </d:listitem>
  <d:listitem>
    <d:para>An optional minimum field width. If the converted value has fewer
    characters than the field width, it is padded with spaces (by default) on
    the left (or right, if the left adjustment flag, described later, has been
    given) to the field width. The field width takes the form of an asterisk *
    (described later) or a nonnegative decimal integer.<d:footnote><d:para>Note
    that 0 is taken as a flag, not as the beginning of a field
    width.</d:para></d:footnote></d:para>
  </d:listitem>
  <d:listitem>
    <d:para>An optional precision that gives the minimum number of digits to
    appear for the <d:code>d, i, o, u, x</d:code> and <d:code>X</d:code>
    conversions, the number of digits to appear after the decimal-point
    character for <d:code>a, A, e, E, f</d:code> and <d:code>F</d:code>
    conversions, the maximum number of significant digits for the
    <d:code>g</d:code> and <d:code>G</d:code> conversions, or the maximum
    number of bytes to be written for <d:code>s</d:code> conversions. The
    precision takes the form of a period (.) followed either by an asterisk *
    (described later) or by an optional decimal integer; if only the period is
    specified, the precision is taken as zero. If a precision appears with any
    other conversion specifier, the behavior is undefined.</d:para>
  </d:listitem>
  <d:listitem>
    <d:para>An optional length modifier that specifies the size of the
    argument.</d:para>
  </d:listitem>
  <d:listitem>
    <d:para>A conversion specifier character that specifies the type of
    conversion to be applied.</d:para>
  </d:listitem>
</d:itemizedlist>
<d:para>As noted above, a field width, or precision, or both, may be indicated
by an asterisk. In this case, an int argument supplies the field width or
precision. The arguments specifying field width, or precision, or both, shall
appear (in that order) before the argument (if any) to be converted. A negative
field width argument is taken as a - flag followed by a positive field width. A
negative precision argument is taken as if the precision were omitted.</d:para>
<d:para>The flag characters and their meanings are:</d:para>
<d:para>- The result of the conversion is left-justified within the field. (It
is right-justified if this flag is not specified.)</d:para>
<d:para>+ The result of a signed conversion always begins with a plus or minus
sign. (It begins with a sign only when a negative value is converted if this
flag is not specified.)<d:footnote><d:para>The results of all floating
conversions of a negative zero, and of negative values that round to zero,
include a minus sign.</d:para></d:footnote></d:para>
<d:para><d:emphasis role="italic">space</d:emphasis> If the first character of
a signed conversion is not a sign, or if a signed conversion results in no
characters, a space is prefixed to the result. If the space and + flags both
appear, the space flag is ignored.</d:para>
<d:para># The result is converted to an "alternative form". For
<d:code>o</d:code> conversion, it increases the precision, if and only if
necessary, to force the first digit of the result to be a zero (if the value
and precision are both 0, a single 0 is printed). For <d:code>x</d:code> (or
<d:code>X</d:code>) conversion, a nonzero result has <d:code>0x</d:code> (or
<d:code>0X</d:code>) prefixed to it. For <d:code>a, A, e, E, f, F, g</d:code>
and <d:code>G</d:code> conversions, the result of converting a floating-point
number always contains a decimal-point character, even if no digits follow
it. (Normally, a decimal-point character appears in the result of these
conversions only if a digit follows it.) For <d:code>g</d:code> and
<d:code>G</d:code> conversions, trailing zeros are not removed from the
result. For other conversions, the behavior is undefined.</d:para>
<d:para>0 For <d:code>d, i, o, u, x, X, a, A, e, E, f, F, g</d:code> and
<d:code>G</d:code> conversions, leading zeros (following any indication of sign
or base) are used to pad to the field width rather than performing space
padding, except when converting an infinity or NaN. If the 0 and - flags both
appear, the 0 flag is ignored. For <d:code>d, i, o, u, x</d:code> and
<d:code>X</d:code> conversions, if a precision is specified, the 0 flag is
ignored. For other conversions, the behavior is undefined.</d:para>
<d:para>The length modifiers and their meanings are:</d:para>
<d:para><d:code>hh</d:code> Specifies that a following <d:code>d, i, o, u,
x</d:code> or <d:code>X</d:code> conversion specifier applies to a
<d:code>signed char</d:code> or <d:code>unsigned char</d:code> argument (the
argument will have been promoted according to the integer promotions, but its
value shall be converted to <d:code>signed char</d:code> or <d:code>unsigned
char</d:code> before printing); or that a following <d:code>n</d:code>
conversion specifier applies to a pointer to a <d:code>signed char</d:code>
argument.</d:para>
<d:para><d:code>h</d:code> Specifies that a following <d:code>d, i, o, u,
x</d:code> or <d:code>X</d:code> conversion specifier applies to a
<d:code>short int</d:code> or <d:code>unsigned short int</d:code> argument (the
argument will have been promoted according to the integer promotions, but its
value shall be converted to <d:code>short int</d:code> or <d:code>unsigned
short int</d:code> before printing); or that a following <d:code>n</d:code>
conversion specifier applies to a pointer to a <d:code>short int</d:code>
argument.</d:para>
<d:para><d:code>l</d:code> (ell) Specifies that a following <d:code>d, i, o, u,
x</d:code> or <d:code>X</d:code> conversion specifier applies to a <d:code>long
int</d:code> or <d:code>unsigned long int</d:code> argument; that a following
<d:code>n</d:code> conversion specifier applies to a pointer to a <d:code>long
int</d:code> argument; that a following c conversion specifier applies to a
<d:code>wint_t</d:code> argument; that a following <d:code>s</d:code>
conversion specifier applies to a pointer to a <d:code>wchar_t</d:code>
argument; or has no effect on a following <d:code>a, A, e, E, f, F, g</d:code>
or <d:code>G</d:code> conversion specifier.</d:para>
<d:para><d:code>ll</d:code> (ell-ell) Specifies that a following <d:code>d, i,
o, u, x</d:code> or <d:code>X</d:code> conversion specifier applies to a
<d:code>long long int</d:code> or <d:code>unsigned long long</d:code> int
argument; or that a following n conversion specifier applies to a pointer to a
<d:code>long long int</d:code> argument.</d:para>
<d:para><d:code>j</d:code> Specifies that a following <d:code>d, i, o, u,
x</d:code> or <d:code>X</d:code> conversion specifier applies to an
<d:code>intmax_t</d:code> or <d:code>uintmax_t</d:code> argument; or that a
following <d:code>en</d:code> conversion specifier applies to a pointer to an
<d:code>intmax_t</d:code> argument.</d:para>
<d:para><d:code>z</d:code> Specifies that a following <d:code>d, i, o, u,
x</d:code> or <d:code>X</d:code> conversion specifier applies to a
<d:code>size_t</d:code> or the corresponding signed integer type argument; or
that a following <d:code>n</d:code> conversion specifier applies to a pointer
to a signed integer type corresponding to <d:code>size_t</d:code>
argument.</d:para>
<d:para><d:code>t</d:code> Specifies that a following <d:code>d, i, o, u,
x</d:code> or <d:code>X</d:code> conversion specifier applies to a
<d:code>ptrdiff_t</d:code> or the corresponding unsigned integer type argument;
or that a following n conversion specifier applies to a pointer to a
<d:code>ptrdiff_t</d:code> argument.</d:para>
<d:para><d:code>L</d:code> Specifies that a following <d:code>a, A, e, E, f, F,
g</d:code> or <d:code>G</d:code> conversion specifier applies to a <d:code>long
double</d:code> argument.</d:para>
<d:para>If a length modifier appears with any conversion specifier other than
as specified above, the behavior is undefined.</d:para>
<d:para>The conversion specifiers and their meanings are:</d:para>
<d:para><d:code>d, i</d:code> The <d:code>int</d:code> argument is converted to
signed decimal in the style <d:emphasis role="italic">[-]dddd</d:emphasis>. The
precision specifies the minimum number of digits to appear; if the value being
converted can be represented in fewer digits, it is expanded with leading
zeros. The default precision is 1. The result of converting a zero value with a
precision of zero is no characters.</d:para>
<d:para><d:code>o, u, x, X</d:code> The <d:code>unsigned int</d:code> argument
is converted to unsigned octal (o), unsigned decimal (u), or unsigned
hexadecimal notation (<d:code>x</d:code> or <d:code>X</d:code>) in the style
<d:code>dddd</d:code>; the letters <d:code>abcdef</d:code> are used for
<d:code>y</d:code> conversion and the letters <d:code>ABCDEF</d:code> for
<d:code>X</d:code> conversion. The precision specifies the minimum number of
digits to appear; if the value being converted can be represented in fewer
digits, it is expanded with leading zeros. The default precision is 1. The
result of converting a zero value with a precision of zero is no
characters.</d:para>
<d:para><d:code>f, F</d:code> A double argument representing a floating-point
number is converted to decimal notation in the style <d:emphasis
role="italic">[-]ddd.ddd</d:emphasis>, where the number of digits after the
decimal-point character is equal to the precision specification. If the
precision is missing, it is taken as 6; if the precision is zero and the
<d:code>#</d:code> flag is not specified, no decimal-point character
appears. If a decimal-point character appears, at least one digit appears
before it. The value is rounded to the appropriate number of digits.</d:para>
<d:para>A <d:code>double</d:code> argument representing an infinity is
converted in one of the styles <d:emphasis role="bold">[-]inf</d:emphasis> or
<d:emphasis role="bold"></d:emphasis> &#x2014;- which style is
implementation-defined. A double argument representing a NaN is converted in
one of the styles <d:emphasis role="bold">[-]nan</d:emphasis> or <d:emphasis
role="bold">[-]nan</d:emphasis> (<d:emphasis
role="italic">n-char-sequence</d:emphasis>) &#x2014; which style, and the
meaning of any n-char-sequence, is implementation-defined. The
<d:code>F</d:code> conversion specifier produces <d:code>INF, INFINITY</d:code>
or <d:code>NAN</d:code> instead of <d:code>inf, infinity</d:code> or
<d:code>nan</d:code> respectively.<d:footnote><d:para>When applied to infinite
and NaN values, the -, + and space flag characters have their usual meaning;
the # and 0 flag characters have no effect.</d:para></d:footnote></d:para>
<d:para><d:code>e, E</d:code> A double argument representing a floating-point
number is converted in the style <d:emphasis
role="italic">[-]d.ddd</d:emphasis> e<d:inlineequation><mml:math
xmlns="http://www.w3.org/1998/Math/MathML">
  <mml:mo>&#x00B1;<!-- ± --></mml:mo>
  <mml:mi>d</mml:mi>
  <mml:mi>d</mml:mi>
</mml:math></d:inlineequation> , where there is one digit (which is nonzero if
the argument is nonzero) before the decimal-point character and the number of
digits after it is equal to the precision; if the precision is missing, it is
taken as 6; if the precision is zero and the <d:code>#</d:code> flag is not
specified, no decimal-point character appears. The value is rounded to the
appropriate number of digits. The E conversion specifier produces a number with
E instead of e introducing the exponent. The exponent always contains at least
two digits, and only as many more digits as necessary to represent the
exponent. If the value is zero, the exponent is zero.</d:para>
<d:para>A <d:code>double</d:code> argument representing an infinity or NaN is
converted in the style of an <d:code>f</d:code> or <d:code>F</d:code>
conversion specifier.</d:para>
<d:para><d:code>g, G</d:code> A double argument representing a floating-point
number is converted in style <d:code>f</d:code> or <d:code>e</d:code> (or in
style <d:code>F</d:code> or <d:code>E</d:code> in the case of a
<d:code>G</d:code> conversion specifier), depending on the value converted and
the precision. Let <d:inlineequation><mml:math
xmlns="http://www.w3.org/1998/Math/MathML">
  <mml:mi>P</mml:mi>
</mml:math></d:inlineequation> equal the precision if nonzero, 6 if the
precision is omitted, or 1 if the precision is zero. Then, if a conversion with
style <d:code>E</d:code> would have an exponent of <d:inlineequation><mml:math
xmlns="http://www.w3.org/1998/Math/MathML">
  <mml:mi>X</mml:mi>
</mml:math></d:inlineequation>:</d:para>
<d:itemizedlist>
  <d:listitem>
    <d:para>If <d:inlineequation><mml:math xmlns="http://www.w3.org/1998/Math/MathML">
  <mml:mi>P</mml:mi>
  <mml:mo>&gt;</mml:mo>
  <mml:mi>X</mml:mi>
  <mml:mo>&#x2265;<!-- ≥ --></mml:mo>
  <mml:mo>&#x2212;<!-- − --></mml:mo>
  <mml:mn>4</mml:mn>
</mml:math></d:inlineequation>. the conversion is with style <d:code>f</d:code>
(or <d:code>F</d:code>) and precision <d:inlineequation><mml:math xmlns="http://www.w3.org/1998/Math/MathML">
  <mml:mi>P</mml:mi>
  <mml:mo>&#x2212;<!-- − --></mml:mo>
  <mml:mo stretchy="false">(</mml:mo>
  <mml:mi>X</mml:mi>
  <mml:mo>+</mml:mo>
  <mml:mn>1</mml:mn>
  <mml:mo stretchy="false">)</mml:mo>
</mml:math></d:inlineequation></d:para>
  </d:listitem>
  <d:listitem>
    <d:para>otherwise, the conversion is with style <d:code>e</d:code> (or
    <d:code>E</d:code>) and precision <d:inlineequation><mml:math xmlns="http://www.w3.org/1998/Math/MathML">
  <mml:mi>P</mml:mi>
  <mml:mo>&#x2212;<!-- − --></mml:mo>
  <mml:mn>1</mml:mn>
</mml:math></d:inlineequation>.</d:para>
  </d:listitem>
</d:itemizedlist>
<d:para>Finally, unless the <d:code>#</d:code> flag is used, any trailing zeros
are removed from the fractional portion of the result and the decimal-point
character is removed if there is no fractional portion remaining.</d:para>
<d:para>A <d:code>double</d:code> argument representing an infinity or NaN is
converted in the style of an <d:code>f</d:code> or <d:code>F</d:code>
conversion specifier.</d:para>
<d:para><d:code>a, A</d:code> A <d:code>double</d:code> argument representing a
floating-point number is converted in the style <d:emphasis
role="italic">[-]0xh.hhhh</d:emphasis> <d:inlineequation><mml:math
xmlns="http://www.w3.org/1998/Math/MathML">
  <mml:mi>p</mml:mi>
  <mml:mo>&#x00B1;<!-- ± --></mml:mo>
  <mml:mi>d</mml:mi>
</mml:math></d:inlineequation>, where there is one hexadecimal digit (which is
nonzero if the argument is a normalized floating-point number and is otherwise
unspecified) before the decimal-point character<d:footnote><d:para>Binary
implementations can choose the hexadecimal digit to the left of the
decimal-point character so that subsequent digits align to nibble (4-bit)
boundaries.</d:para></d:footnote> nd the number of hexadecimal digits after it
is equal to the precision; if the precision is missing and
<d:code>FLT_RADIX</d:code> is a power of 2, then the precision is sufficient
for an exact representation of the value; if the precision is missing and
<d:code>FLT_RADIX</d:code> is not a power of 2, then the precision is
sufficient to distinguish<d:footnote><d:para>The precision <d:inlineequation><mml:math
xmlns="http://www.w3.org/1998/Math/MathML">
  <mml:mi>p</mml:mi>
</mml:math></d:inlineequation> is sufficient to
distinguish values of the source type if <d:inlineequation><mml:math
xmlns="http://www.w3.org/1998/Math/MathML">
  <mml:msup>
    <mml:mn>16</mml:mn>
    <mml:mrow class="MJX-TeXAtom-ORD">
      <mml:mi>p</mml:mi>
      <mml:mo>&#x2212;<!-- − --></mml:mo>
      <mml:mn>1</mml:mn>
    </mml:mrow>
  </mml:msup>
  <mml:mo>&gt;</mml:mo>
  <mml:msup>
    <mml:mi>b</mml:mi>
    <mml:mi>n</mml:mi>
  </mml:msup>
</mml:math></d:inlineequation> where
<d:inlineequation><mml:math xmlns="http://www.w3.org/1998/Math/MathML">
  <mml:mi>b</mml:mi>
</mml:math></d:inlineequation> is <d:code>FLT_RADIX</d:code> and
<d:inlineequation><mml:math xmlns="http://www.w3.org/1998/Math/MathML">
  <mml:mi>n</mml:mi>
</mml:math></d:inlineequation> is the number of base-b digits in the
significand of the source type. A smaller <d:inlineequation><mml:math
xmlns="http://www.w3.org/1998/Math/MathML">
  <mml:mi>p</mml:mi>
</mml:math></d:inlineequation> might suffice depending on the implementation’s
scheme for determining the digit to the left of the decimal-point
character.</d:para></d:footnote> values of type double, except that trailing
zeros may be omitted; if the precision is zero and the <d:code>#</d:code> flag
is not specified, no decimal-point character appears. The letters abcdef are
used for a conversion and the letters <d:code>ABCDEF</d:code> for A
conversion. The A conversion specifier produces a number with
<d:code>X</d:code> and <d:code>P</d:code> instead of <d:code>x</d:code> and
<d:code>p</d:code>. The exponent always contains at least one digit, and only
as many more digits as necessary to represent the decimal exponent of 2. If the
value is zero, the exponent is zero. A double argument representing an infinity
or NaN is converted in the style of an <d:code>f</d:code> or <d:code>F</d:code>
conversion specifier.</d:para>
<d:para><d:code>c</d:code> If no <d:code>l</d:code> length modifier is present,
the <d:code>int</d:code> argument is converted to an <d:code>unsigned
char</d:code>, and the resulting character is written.</d:para>
<d:para>If an <d:code>l</d:code> length modifier is present, the
<d:code>wint_t</d:code> argument is converted as if by an <d:code>ls</d:code>
conversion specification with no precision and an argument that points to the
initial element of a two-element array of <d:code>wchar_t</d:code>, the first
element containing the <d:code>wint_t</d:code> argument to the
<d:code>lc</d:code> conversion specification and the second a null wide
character.</d:para>
<d:para><d:code>s</d:code> If no <d:code>l</d:code> length modifier is present,
the argument shall be a pointer to the initial element of an array of character
type.<d:footnote><d:para>No special provisions are made for multibyte
characters.</d:para></d:footnote> Characters from the array are written up to
(but not including) the terminating null character. If the precision is
specified, no more than that many bytes are written. If the precision is not
specified or is greater than the size of the array, the array shall contain a
null character.</d:para>
<d:para>If an <d:code>l</d:code> length modifier is present, the argument shall
be a pointer to the initial element of an array of <d:code>wchar_t</d:code>
type. Wide characters from the array are converted to multibyte characters
(each as if by a call to the <d:code>wcrtomb</d:code> function, with the
conversion state described by an <d:code>mbstate_t</d:code> object initialized
to zero before the first wide character is converted) up to and including a
terminating null wide character. The resulting multibyte characters are written
up to (but not including) the terminating null character (byte). If no
precision is specified, the array shall contain a null wide character. If a
precision is specified, no more than that many bytes are written (including
shift sequences, if any), and the array shall contain a null wide character if,
to equal the multibyte character sequence length given by the precision, the
function would need to access a wide character one past the end of the
array. In no case is a partial multibyte character
written.<d:footnote><d:para>Redundant shift sequences may result if multibyte
characters have a state-dependent encoding.</d:para></d:footnote></d:para>
<d:para><d:code>p</d:code> The argument shall be a pointer to
<d:code>void</d:code>. The value of the pointer is converted to a sequence of
printing characters, in an implementation-defined manner.</d:para>
<d:para><d:code>n</d:code> The argument shall be a pointer to signed integer
into which is written the number of characters written to the output stream so
far by this call to fprintf. No argument is converted, but one is consumed. If
the conversion specification includes any flags, a field width, or a precision,
the behavior is undefined.</d:para>
<d:para><d:code>%</d:code> A <d:code>%</d:code> character is written. No
argument is converted. The complete conversion specification shall be
<d:code>%%</d:code>.</d:para>
<d:para>If a conversion specification is invalid, the behavior is undefined. If
any argument is not the correct type for the corresponding conversion
specification, the behavior is undefined.</d:para>
<d:para>In no case does a nonexistent or small field width cause truncation of
a field; if the result of a conversion is wider than the field width, the field
is expanded to contain the conversion result.</d:para>
<d:para>For a and A conversions, if <d:code>FLT_RADIX</d:code> is a power of 2,
the value is correctly rounded to a hexadecimal floating number with the given
precision.</d:para>
<d:para><d:emphasis role="bold">Recommended practice</d:emphasis></d:para>
<d:para>For <d:code>a</d:code> and <d:code>A</d:code> conversions, if
<d:code>FLT_RADIX</d:code> is not a power of 2 and the result is not exactly
representable in the given precision, the result should be one of the two
adjacent numbers in hexadecimal floating style with the given precision, with
the extra stipulation that the error should have a correct sign for the current
rounding direction.</d:para>
<d:para>For <d:code>e, E, f, F, g</d:code> and <d:code>G</d:code> conversions,
if the number of significant decimal digits is at most
<d:code>DECIMAL_DIG</d:code>, then the result should be correctly
rounded.<d:footnote><d:para>For binary-to-decimal conversion, the result
format’s values are the numbers representable with the given format
specifier. The number of significant digits is determined by the format
specifier, and in the case of fixed-point conversion by the source value as
well.</d:para></d:footnote> If the number of significant decimal digits is more
than <d:code>DECIMAL_DIG</d:code> but the source value is exactly representable
with <d:code>DECIMAL_DIG</d:code> digits, then the result should be an exact
representation with trailing zeros. Otherwise, the source value is bounded by
two adjacent decimal strings <d:inlineequation><mml:math
xmlns="http://www.w3.org/1998/Math/MathML">
  <mml:mi>L</mml:mi>
  <mml:mo>&lt;</mml:mo>
  <mml:mi>U</mml:mi>
</mml:math></d:inlineequation>, both having <d:code>DECIMAL_DIG</d:code>
significant digits; the value of the resultant decimal string <mml:math
xmlns="http://www.w3.org/1998/Math/MathML"> 
  <mml:mi>D</mml:mi>
</mml:math> should satisfy <d:inlineequation><mml:math
xmlns="http://www.w3.org/1998/Math/MathML">
  <mml:mi>L</mml:mi>
  <mml:mo>&#x2264;<!-- ≤ --></mml:mo>
  <mml:mi>D</mml:mi>
  <mml:mo>&#x2264;<!-- ≤ --></mml:mo>
  <mml:mi>U</mml:mi>
</mml:math></d:inlineequation>, with the extra stipulation that the error
should have a correct sign for the current rounding direction.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>fprintf</d:code> function returns the number of characters
transmitted, or a negative value if an output or encoding error
occurred.</d:para>
<d:para><d:emphasis role="bold">Environmental limits</d:emphasis></d:para>
<d:para>The number of characters that can be produced by any single conversion
shall be at least 4095.</d:para>
<d:para>EXAMPLE 1 To print a date and time in the form "Sunday, July 3, 10:02"
followed by <d:inlineequation><mml:math xmlns="http://www.w3.org/1998/Math/MathML">
  <mml:mi>&#x03C0;<!-- π --></mml:mi>
</mml:math></d:inlineequation> to five decimal places: <d:programlisting role="CLexer">#include &lt;math.h>
#include &lt;stdio.h>
/* ... */
char *weekday, *month; // pointers to strings
int day, hour, min;
fprintf(stdout, "%s, %s %d, %.2d:%.2d\n",
weekday, month, day, hour, min);
fprintf(stdout, "pi = %.5f\n", 4 * atan(1.0));</d:programlisting></d:para>
<d:para>EXAMPLE 2 In this example, multibyte characters do not have a
state-dependent encoding, and the members of the extended character set that
consist of more than one byte each consist of exactly two bytes, the first of
which is denoted here by a and the second by an uppercase letter.</d:para>
<d:para><d:emphasis role="bold">Forward references:</d:emphasis> conversion
state (Extended multibyte/wide character conversion utilities), the
<d:code>wcrtomb</d:code> function (The wcrtomb function).</d:para>
    </d:sect2>
  </d:sect1>
</d:chapter>
