<?xml version="1.0" encoding="UTF-8"?>
<d:chapter version="5.0" xmlns:d="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2003/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:mml="http://www.w3.org/1998/Math/MathML">
  <?dbhtml filename="stdio/index.html" ?>
  <d:title>Input/Output &amp;lt;stdio.h></d:title>
  <d:sect1>
    <d:title>Introduction</d:title>
    <d:para>The header <d:code>&amp;lt;stdio.h></d:code> declares three types,
    several macros, and many functions for performing input and
    output.</d:para>
    <d:para>The types declared are <d:code>size_t</d:code> (described in Common
    definitions &amp;lt;stddef.h>);</d:para>
    <d:blockquote><d:para><d:code>FILE</d:code></d:para></d:blockquote>
    <d:para>which is an object type capable of recording all the information
    needed to control a stream, including its file position indicator, a
    pointer to its associated buffer (if any), an error indicator that records
    whether a read/write error has occurred, and an end-of-file indicator that
    records whether the end of the file has been reached; and</d:para>
    <d:blockquote><d:para><d:code>fpos_t</d:code></d:para></d:blockquote>
    <d:para>which is an object type other than an array type capable of
    recording all the information needed to specify uniquely every position
    within a file.</d:para>
    <d:para>The macros are NULL (described in Common definitions
    &amp;lt;stddef.h>);</d:para>
    <d:blockquote>
      <d:para><d:code>_IOFBF</d:code></d:para>
      <d:para><d:code>_IOLBF</d:code></d:para>
      <d:para><d:code>_IONBF</d:code></d:para>
    </d:blockquote>
    <d:para>which expand to integer constant expressions with distinct values,
    suitable for use as the third argument to the <d:code>setvbuf</d:code>
    function;</d:para>
    <d:blockquote><d:para><d:code>BUFSIZ</d:code></d:para></d:blockquote>
    <d:para>which expands to an integer constant expression that is the size of
    the buffer used by the <d:code>setbuf</d:code> function;</d:para>
    <d:blockquote><d:para><d:code>EOF</d:code></d:para></d:blockquote>
    <d:para>which expands to an integer constant expression, with type int and
    a negative value, that is returned by several functions to indicate
    end-of-file, that is, no more input from a stream;</d:para>
    <d:blockquote><d:para><d:code>FOPEN_MAX</d:code></d:para></d:blockquote>
    <d:para>which expands to an integer constant expression that is the minimum 
    number of files that the implementation guarantees can be open
    simultaneously;</d:para>
    <d:blockquote><d:para><d:code>FILENAME_MAX</d:code></d:para></d:blockquote>
    <d:para>which expands to an integer constant expression that is the size
    needed for an array of char large enough to hold the longest file name
    string that the implementation guarantees can be
    opened;<d:footnote><d:para>If the implementation imposes no practical limit
    on the length of file name strings, the value of
    <d:code>FILENAME_MAX</d:code> should instead be the recommended size of an
    array intended to hold a file name string. Of course, file name string
    contents are subject to other system-specific constraints; therefore all
    possible strings of length <d:code>FILENAME_MAX</d:code> cannot be expected
    to be opened successfully.</d:para></d:footnote></d:para>
    <d:blockquote><d:para><d:code>L_tmpnam</d:code></d:para></d:blockquote>
    <d:para>which expands to an integer constant expression that is the size
    needed for an array of char large enough to hold a temporary file name
    string generated by the <d:code>tmpnam</d:code> function;</d:para>

  </d:sect1>
</d:chapter>
