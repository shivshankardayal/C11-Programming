<?xml version="1.0" encoding="utf-8"?>
<d:chapter version="5.0" xmlns:d="http://docbook.org/ns/docbook"
           xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
           xmlns:mml="http://www.w3.org/1998/Math/MathML" id="time">
  <?xml-stylesheet href="../css/style.css" type="text/css"?>
  <?dbhtml filename="time/index.html" ?>
  <d:title>Date and time &lt;time.h&gt;</d:title>
  <d:sect1>
    <d:title>Components of time</d:title>
    <d:para>
      The header <d:code>&lt;time.h&gt;</d:code> defines two macros, and
      declares several types and functions for manipulating time. Many
      functions deal with a <d:emphasis role="italic">calendar
      time</d:emphasis> that represents the current date (according to the
      Gregorian calendar) and time. Some functions deal with <d:emphasis
      role="italic">local time</d:emphasis>, which is the calendar time
      expressed for some specific time zone, and with <d:emphasis
      role="italic">Daylight Saving Time</d:emphasis>, which is a temporary
      change in the algorithm for determining local time. The local time zone
      and Daylight Saving Time are implementation-defined.
    </d:para>
    <d:para>
      The macros defined are <d:code>NULL</d:code> (described in 7.19);
    </d:para>
    <d:blockquote>
      <d:para><d:code>CLOCKS_PER_SEC</d:code></d:para>
    </d:blockquote>
    <d:para>
      which expands to an expression with type <d:code>clock_t</d:code>
      (described below) that is the number per second of the value returned by
      the <d:code>clock</d:code> function; and
    </d:para>
    <d:blockquote>
      <d:para><d:code>TIME_UTC</d:code></d:para>
    </d:blockquote>
    <d:para>
      which expands to an integer constant greater than 0 that designates the
      UTC time base.<d:footnote><d:para>Implementations may define additional
      time bases, but are only required to support a real time clock based on
      UTC.</d:para></d:footnote>
    </d:para>
    <d:para>
      The types declared are <d:code>size_t</d:code> (described in 7.19);
    </d:para>
    <d:blockquote>
      <d:para><d:code>clock_t</d:code></d:para>
    </d:blockquote>
    <d:para>and</d:para>
    <d:blockquote>
      <d:para><d:code>time_t</d:code></d:para>
    </d:blockquote>
    <d:para>
      which are real types capable of representing times;
    </d:para>
    <d:blockquote>
      <d:para><d:code>struct timespec</d:code></d:para>
    </d:blockquote>
    <d:para>
      which holds an interval specified in seconds and nanoseconds (which may
      represent a calendar time based on a particular epoch); and 
    </d:para>
    <d:blockquote>
      <d:para><d:code>struct tm</d:code></d:para>
    </d:blockquote>
    <d:para>
      which holds the components of a calendar time, called the <d:emphasis
      role="italic">broken-down time</d:emphasis>.
    </d:para>
    <d:para>
      The range and precision of times representable in
      <d:code>clock_t</d:code> and <d:code>time_t</d:code> are
      implementation-defined. The <d:code>timespec</d:code> structure shall
      contain at least the following members, in any
      order.<d:footnote><d:para>The <d:code>tv_sec</d:code> member is a linear
      count of seconds and may not have the normal semantics of a
      <d:code>time_t</d:code>. The semantics of the members and their normal
      ranges are expressed in the comments.</d:para></d:footnote>
    </d:para>
    <d:programlisting><![CDATA[time_t tv_sec; // whole seconds — ≥ 0
long tv_nsec;  // nanoseconds — [0, 999999999]]]>
    </d:programlisting>
    <d:para>
      The <d:code>tm</d:code> structure shall contain at least the following
      members, in any order. The semantics of the members and their normal
      ranges are expressed in the comments.<d:footnote><d:para>The range [0,
      60] for <d:code>tm_sec</d:code> allows for a positive leap
      second.</d:para></d:footnote>
    </d:para>
    <d:programlisting><![CDATA[int tm_sec;   // seconds after the minute — [0, 60]
int tm_min;   // minutes after the hour — [0, 59]
int tm_hour;  // hours since midnight — [0, 23]
int tm_mday;  // day of the month — [1, 31]
int tm_mon;   // months since January — [0, 11]
int tm_year;  // years since 1900
int tm_wday;  // days since Sunday — [0, 6]
int tm_yday;  // days since January 1 — [0, 365]
int tm_isdst; // Daylight Saving Time flag]]></d:programlisting>
    <d:para>
      The value of <d:code>tm_isdst</d:code> is positive if Daylight Saving
      Time is in effect, zero if Daylight Saving Time is not in effect, and
      negative if the information is not available.
    </d:para>
  </d:sect1>
  <d:sect1>
    <d:title>Time manipulation function</d:title>
    <d:sect2>
      <d:title>The clock function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting><![CDATA[
#include <time.h>
clock_t clock(void);]]></d:programlisting>
      <d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
      <d:para>
        The <d:code>clock</d:code> function determines the processor time used.
      </d:para>
      <d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
      <d:para>
        The <d:code>clock</d:code> function returns the implementation's best
        approximation to the processor time used by the program since the
        beginning of an implementation-defined era related only to the program
        invocation. To determine the time in seconds, the value returned by the
        <d:code>clock</d:code> function should be divided by the value of the
        macro <d:code>CLOCKS_PER_SEC</d:code>. If the processor time used is
        not available or its value cannot be represented, the function returns
        the value <d:code>(clock_t)(-1)</d:code>.<d:footnote><d:para>In order
        to measure the time spent in a program, the <d:code></d:code> function
        should be called at the start of the program and its return value
        subtracted from the value returned by subsequent
        calls.</d:para></d:footnote>
      </d:para>
    </d:sect2>
    <d:sect2>
      <d:title>The difftime function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting><![CDATA[double difftime(time_t time1, time_t time0);]]></d:programlisting>
      <d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
      <d:para>
        The <d:code>difftime</d:code> function computes the difference between
        two calendar times: <d:code>time1 - time0</d:code>.
      </d:para>
      <d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
      <d:para>
        The <d:code>difftime</d:code> function returns the difference expressed
        in seconds as a <d:code>double</d:code>.
      </d:para>
    </d:sect2>
    <d:sect2>
      <d:title>The mktime function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting><![CDATA[#include <time.h>
time_t mktime(struct tm *timeptr);]]></d:programlisting>
      <d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
      <d:para>
        The <d:code>mktime</d:code> function converts the broken-down time,
        expressed as local time, in the structure pointed to by
        <d:code>timeptr</d:code> into a calendar time value with the same
        encoding as that of the values returned by the <d:code>time</d:code>
        function. The original values of the <d:code>tm_wday</d:code> and
        <d:code>tm_yday</d:code> components of the structure are ignored, and
        the original values of the other components are not restricted to the
        ranges indicated above.<d:footnote><d:para>Thus, a positive or zero
        value for <d:code>tm_isdst</d:code> causes the mktime function to
        presume initially that Daylight Saving Time, respectively, is or is not
        in effect for the specified time. A negative value causes it to attempt
        to determine whether Daylight Saving Time is in effect for the
        specified time.</d:para></d:footnote> On successful completion, the
        values of the <d:code>tm_wday</d:code> and <d:code>tm_yday</d:code>
        components of the structure are set appropriately, and the other
        components are set to represent the specified calendar time, but with
        their values forced to the ranges indicated above; the final value of
        <d:code>tm_mday</d:code> is not set until <d:code>tm_mon</d:code> and
        <d:code>tm_year</d:code> are determined.
      </d:para>
      <d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
      <d:para>
        The <d:code>mktime</d:code> function returns the specified calendar
        time encoded as a value of type <d:code>time_t</d:code>. If the
        calendar time cannot be represented, the function returns the value
        <d:code>(time_t)(-1)</d:code>.
      </d:para>
      <d:para>EXAMPLE What day of the week is July 4, 2001?</d:para>
      <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>
#include <time.h>
static const char *const wday[] = {
      "Sunday", "Monday", "Tuesday", "Wednesday",
      "Thursday", "Friday", "Saturday", "-unknown-"
};
struct tm time_str;
/* ... */
time_str.tm_year    = 2001 - 1900;
time_str.tm_mon     = 7 - 1;
time_str.tm_mday    = 4;
time_str.tm_hour    = 0;
time_str.tm_min     = 0;
time_str.tm_sec     = 1;
time_str.tm_isdst  = -1;
if (mktime(&time_str) == (time_t)(-1))
    time_str.tm_wday = 7;
printf("%s\n", wday[time_str.tm_wday]);]]></d:programlisting>
    </d:sect2>
    <d:sect2>
      <d:title>The time function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer"><![CDATA[nclude <time.h>
time_t time(time_t *timer);]]></d:programlisting>
      <d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
      <d:para>
        The <d:code>time</d:code> function determines the current calendar
        time. The encoding of the value is unspecified.
      </d:para>
      <d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
      <d:para>
        The <d:code>time</d:code> function returns the implementation's best
        approximation to the current calendar time. The value
        <d:code>(time_t)(-1)</d:code> is returned if the calendar time is not
        available. If <d:code>timer</d:code> is not a null pointer, the return
        value is also assigned to the object it points to.
      </d:para>
    </d:sect2>
    <d:sect2>
      <d:title>The timespec_get function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer"><![CDATA[#include <time.h>
int timespec_get(struct timespec *ts, int base);]]></d:programlisting>
      <d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
      <d:para>
        The <d:code>timespec_get</d:code> function sets the interval pointed to
        by <d:code>ts</d:code> to hold the current calendar time based on the
        specified time base.
      </d:para>
      <d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
      <d:para>
        If <d:code>base</d:code> is <d:code>TIME_UTC</d:code>, the
        <d:code>tv_sec</d:code> member is set to the number of seconds since an
        implementation defined <d:emphasis role="italic">epoch</d:emphasis>,
        truncated to a whole value and the <d:code>tv_nsec</d:code> member is
        set to the integral number of nanoseconds, rounded to the resolution of
        the system clock.<d:footnote><d:para>Although a <d:code>struct
        timespec</d:code> object describes times with nanosecond resolution,
        the available resolution is system dependent and may even be greater
        than 1 second.</d:para></d:footnote>
      </d:para>
      <d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
      <d:para>
        If the <d:code>timespec_get</d:code> function is successful it returns
        the nonzero value <d:code>base</d:code>; otherwise, it returns zero.
      </d:para>
    </d:sect2>
  </d:sect1>
  <d:sect1>
    <d:title>Time conversion functions</d:title>
    <d:para>
      Except for the <d:code>strftime</d:code> function, these functions each
      return a pointer to one of two types of static objects: a broken-down
      time structure or an array of <d:code>char</d:code>. Execution of any of
      the functions that return a pointer to one of these object types may
      overwrite the information in any object of the same type pointed to by
      the value returned from any previous call to any of them and the
      functions are not required to avoid data races with each
      other.<d:footnote><d:para>Alternative time conversion functions that do
      avoid data races are specified in (&#xa7;
      iso.K.3.8.2).</d:para></d:footnote> The implementation shall behave as if
      no other library functions call these functions.
    </d:para>
    <d:sect2>
      <d:title>The asctime function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer"><![CDATA[#include <time.h>
char *asctime(const struct tm *timeptr);]]></d:programlisting>
      <d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
      <d:para>
        The <d:code>asctime</d:code> function converts the broken-down time in
        the structure pointed to by <d:code>timeptr</d:code> into a string in
        the form
      </d:para>
      <d:programlisting role="CLexer"><![CDATA[Sun Sep 16 01:03:52 1973\n\0]]></d:programlisting>
      <d:para>
        using the equivalent of the following algorithm.
      </d:para>
      <d:programlisting role="CLexer"><![CDATA[char *asctime(const struct tm *timeptr)
{
  static const char wday_name[7][3] = {
    "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"
  };
static const char mon_name[12][3] = {
    "Jan", "Feb", "Mar", "Apr", "May", "Jun",
    "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
};
    
static char result[26];
sprintf(result, "%.3s %.3s%3d %.2d:%.2d:%.2d %d\n",
        wday_name[timeptr->tm_wday],
        mon_name[timeptr->tm_mon],
        timeptr->tm_mday, timeptr->tm_hour,
        timeptr->tm_min, timeptr->tm_sec,
        1900 + timeptr->tm_year);
  return result;
}]]></d:programlisting>
      <d:para>
        If any of the members of the broken-down time contain values that are
        outside their normal ranges,<d:footnote><d:para>see (&#xa7;
        iso.7.27.1)</d:para></d:footnote>the behavior of the
        <d:code>asctime</d:code> function is undefined. Likewise, if the
        calculated year exceeds four digits or is less than the year 1000, the
        behavior is undefined.
      </d:para>
      <d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
      <d:para>
        The <d:code>asctime</d:code> function returns a pointer to the string.
      </d:para>
    </d:sect2>
    <d:sect2>
      <d:title>The ctime function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer"><![CDATA[#include <time.h>
char *ctime(const time_t *timer);]]></d:programlisting>
      <d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
      <d:para>
        The <d:code>ctime</d:code> function converts the calendar time pointed
        to by <d:code>timer</d:code> to local time in the form of a string. It
        is equivalent to
      </d:para>
      <d:blockquote>
        <d:para><d:code>asctime(localtime(timer))</d:code></d:para>
      </d:blockquote>
      <d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
      <d:para>
        The <d:code>ctime</d:code> function returns the pointer returned by the
        <d:code>asctime</d:code> function with that broken-down time as
        argument.
      </d:para>
      <d:para>
        <d:emphasis role="bold">Forward references:</d:emphasis> <d:xref
        linkend="localtime" />.
      </d:para>
    </d:sect2>
    <d:sect2>
      <d:title>The gmtime function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer"><![CDATA[#include <time.h>
struct tm *gmtime(const time_t *timer);]]></d:programlisting>
      <d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
      <d:para>
        The <d:code>gmtime</d:code> function converts the calendar time pointed
        to by <d:code>timer</d:code> into a broken- down time, expressed as
        UTC.
      </d:para>
      <d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
      <d:para>
        The <d:code>gmtime</d:code> function returns a pointer to the
        broken-down time, or a null pointer if the specified time cannot be
        converted to UTC.
      </d:para>
    </d:sect2>
    <d:sect2 id="localtime">
      <d:title>The localtime function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer"><![CDATA[#include <time.h>
struct tm *localtime(const time_t *timer);]]></d:programlisting>
      <d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
      <d:para>
        The <d:code>localtime</d:code> function converts the calendar time
        pointed to by <d:code>timer</d:code> into a broken-down time, expressed
        as local time.
      </d:para>
      <d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
      <d:para>
        The <d:code>localtime</d:code> function returns a pointer to the
        broken-down time, or a null pointer if the specified time cannot be
        converted to local time.
      </d:para>
    </d:sect2>
    <d:sect2 id="strftime">
      <d:title>The strftime function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer"><![CDATA[#include <time.h>
size_t strftime(char * restrict s,
               size_t maxsize,
               const char * restrict format,
               const struct tm * restrict timeptr);]]></d:programlisting>
      <d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
      <d:para>
        The <d:code>strftime</d:code> function places characters into the array
        pointed to by <d:code>s</d:code> as controlled by the string pointed to
        by <d:code>format</d:code>. The format shall be a multibyte character
        sequence, beginning and ending in its initial shift state. The
        <d:code>format</d:code> string consists of zero or more conversion
        specifiers and ordinary multibyte characters. A conversion specifier
        consists of a <d:code>%</d:code> character, possibly followed by an
        <d:code>E</d:code> or <d:code>O</d:code> modifier character (described
        below), followed by a character that determines the behavior of the
        conversion specifier. All ordinary multibyte characters (including the
        terminating null character) are copied unchanged into the array. If
        copying takes place between objects that overlap, the behavior is
        undefined. No more than <d:code>maxsize</d:code> characters are placed
        into the array.
      </d:para>
      <d:para>
        Each conversion specifier is replaced by appropriate characters as
        described in the following list. The appropriate characters are
        determined using the <d:code>LC_TIME</d:code> category of the current
        locale and by the values of zero or more members of the broken-down
        time structure pointed to by <d:code>timeptr</d:code>, as specified in
        brackets in the description. If any of the specified values is outside
        the normal range, the characters stored are unspecified.
      </d:para>
      <informaltable
          xmlns="http://docbook.org/ns/docbook" width="100%" frame="border" border="1"
          class="dynamic">
	    <colgroup width="1*"/>
	    <colgroup width="8*" align="left"/>
        <tbody>
          <tr>
            <td><d:code>%a</d:code></td>
            <td>is replaced by the locale's abbreviated weekday
            name. <d:code>[tm_wday]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%A</d:code></td>
            <td>is replaced by the locale's full weekday
            name. <d:code>[tm_wday]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%b</d:code></td>
            <td>is replaced by the locale's abbreviated month
            name. <d:code>[tm_mon]</d:code></td> 
          </tr>
          <tr>
            <td><d:code>%B</d:code></td>
            <td>is replaced by the locale's full month name. <d:code>[tm_mon]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%c</d:code></td>
            <td>is replaced by the locale's appropriate date and time
            representation. [all specified in (&#xa7; iso.7.27.1]</td>
          </tr>
          <tr>
            <td><d:code>%C</d:code></td>
            <td>is replaced by the year divided by 100 and truncated to an
            integer, as a decimal number
            <d:code>(00−99). [tm_year]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%d</d:code></td>
            <td>is replaced by the day of the month as a decimal number
            <d:code>(01−31). [tm_mday]</d:code></td> 
          </tr>
          <tr>
            <td><d:code>%D</d:code></td>
            <td>is equivalent to
            <d:quote><d:code>%m/%d/%y</d:code></d:quote>. <d:code>[tm_mon,
            tm_mday, tm_year]</d:code></td> 
          </tr>
          <tr>
            <td><d:code>%e</d:code></td>
            <td>is replaced by the day of the month as a decimal number
            <d:code>(1−31)</d:code>; a single digit is preceded by a
            space. <d:code>[tm_mday]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%F</d:code></td>
            <td>is equivalent to <d:quote><d:code>%Y−%m−%d</d:code></d:quote>
            (the ISO 8601 date format). [tm_year, tm_mon, tm_mday]</td>
          </tr>
          <tr>
            <td><d:code>%g</d:code></td>
            <td>is replaced by the last 2 digits of the week-based year (see
            below) as a decimal number
            <d:code>(00−99)</d:code>. <d:code>[tm_year, tm_wday,
            tm_yday]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%G</d:code></td>
            <td>is replaced by the week-based year (see below) as a decimal
            number (e.g., 1997). <d:code>[tm_year, tm_wday,
            tm_yday]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%h</d:code></td>
            <td>s equivalent to
            <d:code>%b</d:code>. <d:code>[tm_mon]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%H</d:code></td>
            <td>is replaced by the hour (24-hour clock) as a decimal number
            <d:code>(00−23)</d:code>. <d:code>[tm_hour]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%I</d:code></td>
            <td>is replaced by the hour (12-hour clock) as a decimal number
            <d:code>(01−12)</d:code>. <d:code>[tm_hour]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%j</d:code></td>
            <td>is replaced by the day of the year as a decimal number
            <d:code>(001−366)</d:code>. <d:code>[tm_yday]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%m</d:code></td>
            <td>is replaced by the month as a decimal number
            <d:code>(01−12)</d:code>. <d:code>[tm_mon]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%M</d:code></td>
            <td>is replaced by the minute as a decimal number
            <d:code>(00−59)</d:code>. <d:code>[tm_min]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%n</d:code></td>
            <td>is replaced by a new-line character.</td>
          </tr>
          <tr>
            <td><d:code>%p</d:code></td>
            <td>is replaced by the locale's equivalent of the AM/PM
            designations associated with a 12-hour
            clock. <d:code>[tm_hour]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%r</d:code></td>
            <td>is replaced by the locale's 12-hour clock
            time. <d:code>[tm_hour, tm_min, tm_sec]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%R</d:code></td>
            <td>is equivalent to
            <d:quote><d:code>%H:%M</d:code></d:quote>. <d:code>[tm_hour,
            tm_min]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%S</d:code></td>
            <td>is replaced by the second as a decimal number
            <d:code>(00−60)</d:code>. <d:code>[tm_sec]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%T</d:code></td>
            <td>is equivalent to <d:quote><d:code>%H:%M:%S</d:code></d:quote>
            (the ISO 8601 time format). <d:code>[tm_hour, tm_min,
            tm_sec]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%u</d:code></td>
            <td>is replaced by the ISO 8601 weekday as a decimal number
            <d:code>(1−7)</d:code>, where Monday is
            1. <d:code>[tm_wday]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%U</d:code></td>
            <td>is replaced by the week number of the year (the first Sunday
            as the first day of week 1) as a decimal number
            <d:code>(00−53)</d:code>. <d:code>[tm_year, tm_wday,
            tm_yday]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%V</d:code></td>
            <td>is replaced by the ISO 8601 week number (see below) as a
            decimal number <d:code>(01−53)</d:code>. <d:code>[tm_year,
            tm_wday, tm_yday]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%w</d:code></td>
            <td>is replaced by the weekday as a decimal number
            <d:code>(0−6)</d:code>, where Sunday is
            0. <d:code>[tm_wday]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%W</d:code></td>
            <td>is replaced by the week number of the year (the first Monday
            as the first day of week 1) as a decimal number
            <d:code>(00−53)</d:code>. <d:code>[tm_year, tm_wday,
            tm_yday]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%x</d:code></td>
            <td>is replaced by the locale's appropriate date
            representation. [all specified in (&#xa7; iso.7.27.1]</td>
          </tr>
          <tr>
            <td><d:code>%X</d:code></td>
            <td>is replaced by the locale's appropriate date
            representation. [all specified in (&#xa7; iso.7.27.1]</td>
          </tr>
          <tr>
            <td><d:code>%y</d:code></td>
            <td>is replaced by the last 2 digits of the year as a decimal
            number <d:code>(00−99)</d:code>. <d:code>[tm_year]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%Y</d:code></td>
            <td>is replaced by the year as a decimal number (e.g.,
            <d:code>1997</d:code>). <d:code>[tm_year]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%z</d:code></td>
            <td>is replaced by the offset from UTC in the ISO 8601 format
            <d:quote><d:code>−0430</d:code></d:quote> (meaning 4 hours 30
            minutes behind UTC, west of Greenwich), or by no characters if no
            time zone is determinable. <d:code>[tm_isdst]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%Z</d:code></td>
            <td>is replaced by the locale's time zone name or abbreviation,
            or by no characters if no time zone is
            determinable. <d:code>[tm_isdst]</d:code></td>
          </tr>
          <tr>
            <td><d:code>%%</d:code></td>
            <td>is replaced by <d:code>%</d:code>.</td>
          </tr>
        </tbody>
      </informaltable>
      <d:para>
        Some conversion specifiers can be modified by the inclusion of an
        <d:code>E</d:code> or <d:code>O</d:code> modifier character to
        indicate an alternative format or specification. If the alternative
        format or specification does not exist for the current locale, the
        modifier is ignored.
      </d:para>
      <informaltable
          xmlns="http://docbook.org/ns/docbook" width="100%" class="dynamic" frame="border" border="1">
	    <colgroup width="1*"/>
	    <colgroup width="8*" align="left"/>
        <tbody>
          <tr>
            <td><d:code>%Ec</d:code></td>
            <td>is replaced by the locale's alternative date and time representation.</td>
          </tr>
          <tr>
            <td><d:code>%EC</d:code></td>
            <td>is replaced by the name of the base year (period) in the
            locale's alternative representation.</td>
          </tr>
          <tr>
            <td><d:code>%Ex</d:code></td>
            <td>is replaced by the locale's alternative date representation.</td>
          </tr>
          <tr>
            <td><d:code>%EX</d:code></td>
            <td>is replaced by the locale's alternative time representation.</td>
          </tr>
          <tr>
            <td><d:code>%Ey</d:code></td>
            <td>is replaced by the offset from <d:code>%EC</d:code> (year only)
            in the locale's alternative representation.</td>
          </tr>
          <tr>
            <td><d:code>%EY</d:code></td>
            <td>is replaced by the locale's full alternative year
            representation.</td>
          </tr>
          <tr>
            <td><d:code>%Od</d:code></td>
            <td>is replaced by the day of the month, using the locale's
            alternative numeric symbols (filled as needed with leading zeros,
            or with leading spaces if there is no alternative symbol for
            zero).</td>
          </tr>
          <tr>
            <td><d:code>%Oe</d:code></td>
            <td>is replaced by the day of the month, using the locale's
            alternative numeric symbols (filled as needed with leading
            spaces).</td>
          </tr>
          <tr>
            <td><d:code>%OH</d:code></td>
            <td>is replaced by the hour (24-hour clock), using the locale's
            alternative numeric symbols.</td>
          </tr>
          <tr>
            <td><d:code>%OI</d:code></td>
            <td>is replaced by the hour (12-hour clock), using the locale's
            alternative numeric symbols.</td>
          </tr>
          <tr>
            <td><d:code>%Om</d:code></td>
            <td>is replaced by the month, using the locale's alternative
            numeric symbols.</td>
          </tr>
          <tr>
            <td><d:code>%OM</d:code></td>
            <td>is replaced by the minutes, using the locale's alternative
            numeric symbols.</td> 
          </tr>
          <tr>
            <td><d:code>%OS</d:code></td>
            <td>is replaced by the seconds, using the locale's alternative
            numeric symbols.</td>
          </tr>
          <tr>
            <td><d:code>%Ou</d:code></td>
            <td>is replaced by the ISO 8601 weekday as a number in the locale's
            alternative representation, where Monday is 1.</td>
          </tr>
          <tr>
            <td><d:code>%OU</d:code></td>
            <td>is replaced by the week number, using the locale's alternative
            numeric symbols.</td>
          </tr>
          <tr>
            <td><d:code>%OV</d:code></td>
            <td>is replaced by the ISO 8601 week number, using the locale's
            alternative numeric symbols.</td>
          </tr>
          <tr>
            <td><d:code>%Ow</d:code></td>
            <td>is replaced by the weekday as a number, using the locale's
            alternative numeric symbols.</td>
          </tr>
          <tr>
            <td><d:code>%OW</d:code></td>
            <td>is replaced by the week number of the year, using the locale's
            alternative numeric symbols.</td>
          </tr>
          <tr>
            <td><d:code>%Oy</d:code></td>
            <td>is replaced by the last 2 digits of the year, using the
            locale's alternative numeric symbols.</td>
          </tr>
        </tbody>
      </informaltable>
      <d:para>
        <d:code>%g, %G</d:code> and <d:code>%V</d:code> give values according
        to the ISO 8601 week-based year. In this system, weeks begin on a
        Monday and week 1 of the year is the week that includes January 4th,
        which is also the week that includes the first Thursday of the year,
        and is also the first week that contains at least four days in the
        year. If the first Monday of January is the 2nd, 3rd, or 4th, the
        preceding days are part of the last week of the preceding year; thus,
        for Saturday 2nd January 1999, <d:code>%G</d:code> is replaced by
        <d:code>1998</d:code> and <d:code>%V</d:code> is replaced by
        <d:code>53</d:code>. If December 29th, 30th, or 31st is a Monday, it
        and any following days are part of week 1 of thefollowingyear. Thus,for
        Tuesday 30th December 1997,<d:code>%G</d:code> is replaced by 1998 and
        %V is replaced by 01.
      </d:para>
      <d:para>
        If a conversion specifier is not one of the above, the behavior is
        undefined.
      </d:para>
      <d:para>
        In the <d:code>"C"</d:code> locale, the <d:code>E</d:code> and
        <d:code>O</d:code> modifiers are ignored and the replacement strings
        for the following specifiers are:
      </d:para>
      <informaltable
          xmlns="http://docbook.org/ns/docbook" width="70%" class="dynamic" frame="border" border="1">
	    <colgroup width="1*"/>
	    <colgroup width="8*" align="left"/>
        <tbody>
          <tr>
            <td><d:code>%a</d:code></td>
            <td>the first three characters of <d:code>%A</d:code>.</td>
          </tr>
          <tr>
            <td><d:code>%A</d:code></td>
            <td>one of <d:quote><d:code>Sunday</d:code></d:quote>,
            <d:quote><d:code>Monday</d:code></d:quote>, ...,
            <d:quote><d:code>Saturday</d:code></d:quote>.</td>
          </tr>
          <tr>
            <td><d:code>%b</d:code></td>
            <td>the first three characters of <d:code>%B</d:code>.</td>
          </tr>
          <tr>
            <td><d:code>%B</d:code></td>
            <td>one of <d:quote><d:code>January</d:code></d:quote>,
            <d:quote><d:code>February</d:code></d:quote>, ...,
            <d:quote><d:code>December</d:code></d:quote>.</td> 
          </tr>
          <tr>
            <td><d:code>%c</d:code></td>
            <td>equivalent to <d:quote><d:code>%a %b %e %T
            %Y</d:code></d:quote>.</td>
          </tr>
          <tr>
            <td><d:code>%p</d:code></td>
            <td>one of <d:quote><d:code>AM</d:code></d:quote> or
            <d:quote><d:code>PM</d:code></d:quote>.</td>
          </tr>
          <tr>
            <td><d:code>%r</d:code></td>
            <td>equivalent to <d:quote><d:code>%I:%M:%S
            %p</d:code></d:quote>.</td>
          </tr>
          <tr>
            <td><d:code>%x</d:code></td>
            <td>equivalent to
            <d:quote><d:code>%m/%d/%y</d:code></d:quote>.</td>
          </tr>
          <tr>
            <td><d:code>%X</d:code></td>
            <td>equivalent to <d:code>%T</d:code>.</td>
          </tr>
          <tr>
            <td><d:code>%Z</d:code></td>
            <td>mplementation-defined.</td>
          </tr>
        </tbody>
      </informaltable>
    </d:sect2>
  </d:sect1>
</d:chapter>
