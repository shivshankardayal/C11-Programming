<d:chapter version="5.0" xmlns:d="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:mml="http://www.w3.org/1998/Math/MathML">
  <?xml-stylesheet href="../css/style.css" type="text/css"?>
    <?dbhtml filename="io/index.html" ?>
    <d:title>Console I/O</d:title>
    <d:para>
      IO stands for input/output. C provides only mechanism to interact through
      console using its standard library. C does not provide ways to have GUI
      although that is possible with various GUI libraries most notable being
      GTK and KDE. However, discussing about GTK or KDE is out of scope of this
      book. In this chapter we will focus on console output facilities of C
      because any program we write at this stage will be meaningless if it has
      no input/output. Typically when we interact with a C program we give
      input using keyboard which is also referred as <d:code>stdin</d:code>
      stream. The output is monitor or <d:code>stdout</d:code> stream. There is
      one more stream <d:code>stderr</d:code> which is generally redirected to
      monitor or a log file. For historical reasons these are known as
      <d:code>FILE</d:code> stream which represents the datatype of these
      streams. <d:code>FILE</d:code> is capable of representing other streams
      which are disk based for example a file on your hard drive. There are
      more type of input devices on a modern computer. For example, network i/o
      is there. Whenever you browse web or download a file through your
      Internet connection network i/o comes into play. There is an opengroup
      which specifies functions for network related functions. Operating
      systems like GNU/Linux are POSIX compatible which defines how network i/o
      will be used. Even a printer is a special output device, a camera input,
      speakers output, microphone input and so on. In this books we are
      concerned with keyboard input, output on monitor and i/o using
      files. Other types of i/os are out of scope of this book.
    </d:para>
    <d:para>
      However, before we go on with i/o I would like to present C's memory
      model which will be needed by our discussion of i/o related
      functions. However, if things do not make sense even then please go
      through it and come later to understand more.
    </d:para>
    <d:sect1>
      <d:indexterm>
        <d:primary>memory model of programs</d:primary>
      </d:indexterm>
      <title xmlns="http://docbook.org/ns/docbook">C's Memory Model</title>
      <d:para>
        As you may be knowing RAM(random access memory) is the area which is
        used as primary memory. Whenever we execute a program the first thing
        which happens is that it gets loaded into memory. Now a binary program
        becomes a process when it is running i.e. a running program is referred
        as process. All processes have memory area divided into different
        portions. These portions are known as data segment, stack and code or
        text segment. Data segment is further split in three parts; initialized
        data segment, uninitialized data segment or BSS which is name after an
        ancient assembler Block Started by Symbol and heap. Initialized data
        segment contains initialized global variables and static variables. For
        uninitialized data segment it is same as above just that the variables
        are not initialized explicitly but implicitly to zero.
      </d:para>
      <d:para>
        Heap is the largest area of memory used for dynamic memory
        allocation. As you will see later that you can manage heap using
        <d:code>malloc(), calloc(), realloc(),</d:code> and
        <d:code>free()</d:code>. Note that compiler does not manage memory
        allocated for you. You, the programmer, are responsible for allocating
        and freeing up memory in area. If heap gets full os will use virtual
        memory or swap space on hard disk. Objects allocated on heap persist
        across function calls. However, there are some very nasty problems,
        which, come in picture when you use heap. There are several of
        them. You may forget to allocate memory and want to dereference
        unallocated pointer. You may have initialized it to
        <d:code>NULL</d:code> and try to dereference that. You may allocate and
        free twice. You forgot to set pointer to <d:code>NULL</d:code> after
        freeing it. And last but not the least you loose all pointers to the
        memory area before you can free. The nature with this particular
        problem is that if your program is going to run for long time then it
        is going to consume more and more memory. Because of its nature it is
        known as memory leak. It is very difficult to detect such problems in
        code which does not run for long periods of time. Our friend valgrind
        will come to help up with this problem. When a memory leak happens it
        eats up <d:hardware>RAM</d:hardware> slowly and then operating system
        has to use virtual memory as explained above. In a nutshell, I will say
        that heap means you have to handle it.
      </d:para>
      <d:para>
        Stack is relatively simple. All non-static and non-register variables
        go on stack if not allocated dynamically. Stack variables do not retain
        there value across function calls unless they are passed as
        pointers. Also, when they go out of scope, that is the scope in which
        they were declared ends, they will be kind of lost. The way in which
        stack frame moves the same area will be used for new
        variables. However, stack is very limited (compared to heap) and in
        deeply nested function calls or recursion (you will see these in
        Functions chapter) stack may get full and program may crash. The reason
        for crashing is that operating system will not use virtual memory but
        will do a segmentation fault in its place. GNU/Linux allow its users to
        modify the stack size by <d:code>ulimit</d:code> command. Note that
        stack and heap are adjacent in memory and grow in opposite direction.
      </d:para>
      <d:para>
        Code segment or text segment is an area where the executable
        instructions of program reside. It is typically constant and read-only
        area unless your system allows self-modifying  code. Following diagram
        shows the memory layout.
      </d:para>
      <d:figure>
        <d:title>C's Memory Model</d:title>
        <d:mediaobject>
          <d:imageobject>
            <d:imagedata fileref="../images/memmod.png" align="center" />
          </d:imageobject>
        </d:mediaobject>
      </d:figure>
      <d:para>
        In this chapter we will look at only those functions, which,
        allow us to do console i/o. We will begin with our familiar friends
        <d:code>printf</d:code> and <d:code>scanf</d:code>.
      </d:para>
    </d:sect1>
    <d:sect1>
      <d:indexterm>
        <d:primary>printf function</d:primary>
      </d:indexterm>
      <d:title>printf</d:title>
      <d:para>
        The prototype of printf is given by:
      </d:para>
      <d:programlisting role="CLexer">int printf(const char* fmt, ...);</d:programlisting>
      <d:para>
        Let us take a minute to understand this as we have not yet covered
        functions. The first word is <d:code>int</d:code> which denotes the
        return type of the <d:code>printf</d:code> function. This is no. of
        characters printed. Then we have name of the
        function. <d:code>fmt</d:code> is the format string of type
        <d:code>const char</d:code>. In C, strings are either character arrays
        or character pointers. Here, <d:code>const</d:code> means
        <d:code>printf</d:code> will not modify the format string. The
        <d:code>...</d:code> means variable no. of arguments, which can be 0
        also, to be supplied to <d:code>printf</d:code>.
      </d:para>
      <d:para>
        <d:code>printf</d:code> is a string based output function that is It
        writes character strings to <d:code>stdout</d:code>. The data which has
        to be written is formatted by format string as shown previously. After
        the format specifier it expects as many arguments as specified in
        format string. The characters which are not like, say
        <d:code>%d</d:code> for example, arecalled ordinary characters. These
        are simply copied to output stream, which, is <d:code>stdout</d:code>
        for <d:code>printf</d:code>. The <d:code>%d</d:code> like conversion
        charcaters are known as conversion specification or format
        specifiers. Each conversion specification should be augmented with one
        one argument. The results are undefined if there are insufficient
        arguments for the format. If extra arguments are given the excess
        arguments will be evaluated but are otherwise ignored. However, there
        is a big problem here! There is no type-safety. In general compiler
        will warn you about it and you, the programmer, are responsible for
        giving correct format string, correct no. of correct type of
        arguments. Consider the following program for 
        example:<d:programlisting role="CLexer">// printf demo
// Description: printf demo

#include &lt;stdio.h>

int main()
{
  printf("%d %d\n", 3, 8);

  //do not mess it. undefined behavior
  printf("%d %d\n", 5);

  //extra arguments ignored
  printf("%d %d\n", 3, 5, "hello");

  //legal because char is integer type
  printf("%d\n", 's');

  //wrap around of integer as char
  printf("%c\n", 836);

  //do not mess with type-safety
  int i = printf("%d\n", "hello");
  prinf("%d\n", i);

  return 0;
}</d:programlisting>
now that if you give the command like <d:code>clang printf.c</d:code> then you
will be shown following warnings:
<d:screen>printf.c:12:14: warning: more '%' conversions than data arguments [-Wformat]
printf("%d %d\n", 5);
                 ~^
printf.c:15:26: warning: data argument not used by format string [-Wformat-extra-args]
        printf("%d %d\n", 3, 5, "hello");
             ~~~~~~~~~        ^
printf.c:24:19: warning: conversion specifies type 'int' but the argument has type
'char *' [-Wformat]
      int i = printf("%d\n", "hello");
                      ~^     ~~~~~~~
                      %s
3 warnings generated.</d:screen>
Clearly this is not a good sign for any program. A program should compile
cleanly. In our case compiler is generating binary even though there are
warnings. You can make compiler generate more warnings by issuing a
<d:code>-Wall</d:code> flag. You can also treat all warnings as errors by
passing <d:code>-Werror</d:code> to compiler. These two options will ensure
that your code has no warnings. Now let us move to output and try to understand
it. The output on my system is as given below. It may differ on your system:
<d:screen>3 8
5 8
3 5
115
D
134514119
10</d:screen> First <d:code>printf</d:code> is correct as expected. The second
line causes undefined behavior. You may think it is the previous 8 but rest
assured it is not guaranteed that it will always the case. Ii is <d:emphasis
role="bold">UNDEFINED</d:emphasis>. Third printf is also fine in the sense that
extra argument is ignored. Fourth and fifth are normal. Sixth is again a big
problem. You are trying to print a decimal integer while argument is a
character string. There is no way for compiler to determine that what should be
printed which will fit on standards.
      </d:para>
      <d:para>
        A full detail of all conversion specification is given in specification
        at <d:xref linkend="fprintf"/>
        (&#xa7;iso.7.21.6.1), which lists <d:code>fprintf</d:code>
        function but conversion specifiers are same as
        <d:code>printf</d:code>.
      </d:para>
      <d:para>
        In real-world most of the time the conversion specifiers are kept
        simple. Given below is a sample program showing some of the things
        given above:
      </d:para>
      <d:programlisting role="CLexer">// Format Specifiers
//Desciption: It is a demo of several format specifiers

#include&lt;stdio.h>

int main()
{
  int i   = 343456;
  float f = 123;
  long double ld = 78939.9347;

  printf("% d\n", i);
  printf("%+d\n", i);
  printf("%#o\n", i);
  printf("%#f\n", f);
  printf("%-08i\n", i);
  printf("%08i\n", i);
  printf("%8i\n", i);
  printf("%hhi\n", i);
  printf("%hi\n", i);
  printf("%li\n", i);
  printf("%lli\n", i);
  printf("%ji\n", i);
  printf("%zi\n", i);
  printf("%ti\n", i);
  printf("%8.8f\n", f);
  printf("%8.8Lf\n", ld);

  return 0;
}</d:programlisting>
      <d:para>and the output is:</d:para>
      <d:screen> 343456
+343456
01236640
123.000000
343456
00343456
  343456
-96
15776
343456
4638355772471066016
4638355772471066016
343456
343456
123.00000000
78939.93470000</d:screen>
      <d:para>
        I suggest you to read the desciption of conversion specifiers
        and experiment with various parameters to get different kind of
        output.
      </d:para>
    </d:sect1>
    <d:sect1>
      <d:indexterm>
        <d:primary>scanf function</d:primary>
      </d:indexterm>
      <d:title>scanf</d:title>
    <d:para>
      The prototype of <d:code>scanf</d:code> is given below which is very
      similar to <d:code>printf</d:code>.
    </d:para>
    <d:programlisting role="CLexer">int scanf(const char * restrict format, ...);</d:programlisting>
    <d:para>
      <d:code>scanf()</d:code> is sister of <d:code>printf()</d:code>. They
      work in tandem. As its name says scan function it scans
      <d:code>stdin</d:code> or keyboard for input. Its signature is same as
      that of <d:code>printf()</d:code>. It raeds bytes from keyboard input,
      interprets them according to format string. It also expects a set of
      pointer arguments as opposed to values for <d:code>printf()</d:code>. The
      pointers indicate where the interpreted data from the input will be
      stored. The result is UNDEFINED if there are less number of pointer
      arguments than the number of conversion specifers in format
      string. Excess arguments will be evaluated but ignored. The format string
      can have only white-space characters or an ordinary character (neither
      '%'; nor a white-space character) or a conversion
      specification. 
    </d:para>
    <d:para>
      The full detail of conversion specification can be found at <d:xref linkend="fscanf" />
      (&#167; iso.7.12.6.2) which lists <d:code>fscanf</d:code> function but
      conversion specifiers are same for both.
    </d:para>
    <d:para>Time for some code. You have already seen many examples of <d:code>scanf</d:code> so I
        will just explain some concepts here. Consider the following program:</d:para>
      <d:programlisting role="CLexer">// Author: Shiv S. Dayal
// Description: Demo of string input

#include &lt;stdio.h>

int main()
{
  char str[128] = {0};

  scanf("%s", str);
  printf("You entered:\n%s\n", str);

  return 0;
}</d:programlisting>
      <d:para>and the output is:</d:para>
      <d:screen>Hi! My name is Shiv.
You entered:
Hi!</d:screen>
      <d:para>It is certainly not the corect output. We had expected to see like: “Hi! My name is
        Shiv.”. What happend to input string after “Hi!”. Well, in a form given above for
          <d:code>scanf()</d:code> it will stop taking input after white-space for character
        strings. For numerics it does not matter as it does not match the format. For characters it
        is character-by-character so no confusion either. So what if you want to have the entire
        string including white-spaces. Use <d:code>[^n]</d:code> as given below:</d:para>
      <d:programlisting role="CLexer">// Author: Shiv S. Dayal
// Description: Corrected demo of string input

#include &lt;stdio.h>

int main()
{
  char str[128] = {0};

  scanf("%[^\n]s", str);
  printf("You entered:\n%s\n", str);

  return 0;
}</d:programlisting>
      <d:para>and the output is:</d:para>
      <d:screen>Hi! My name is Shiv.
You entered:
Hi! My name is Shiv.</d:screen>
      <d:para>What if you want to filter a string based on certain patterns. For example, a
        charcater string does not contain more that a single space, English alphabets, period and
        digits. To scan such a string you can define a pttern as program given below shows:</d:para>
      <d:programlisting role="CLexer">// Author: Shiv. S Dayal
// Description: Demo of []

#include &lt;stdio.h>

int main()
{
  char c[100]={0};

  scanf("%[ A-Za-z0-9!.]", c);
  printf("%s\n", c);

  return 0;
}</d:programlisting>
      <d:para>and the output is:</d:para>
      <d:screen>Hi! My name is Shiv! My phone no. is 1234. %^$&amp;*
Hi! My name is Shiv! My phone no. is 1234.</d:screen>
      <d:para>There is also a major problem associated with input and that comes when you have
        characters involved. Consider the following program:</d:para>
      <d:programlisting role="CLexer">// Author: Shiv S. Dayal
// Description: Demo of scanf() function

#include &lt;stdio.h>

int main()
{
  int   i = 0;
  float f = 0.0;
  char  c1 = '\0';
  char  c2 = '\0';
  char  c3 = '\0';

  printf("Enter an integer, a float and three character one by one:\n");

  scanf("%d", &amp;i);
  scanf("%f", &amp;f);
  scanf("%c", &amp;c1);
  scanf("%c", &amp;c2);
  scanf("%c", &amp;c3);

  printf("You entered\n");
  printf("%d\n", i);
  printf("%f\n", f);
  printf("%c\n", c1);
  printf("%c\n", c2);
  printf("%c\n", c3);

  return 0;
}</d:programlisting>
      <d:para>and the output is:</d:para>
      <d:screen>2
3.4
s
You entered
2
3.400000


s</d:screen>
      <d:para>What is happening here is that newline entered by our <d:code>RET</d:code> key is
        getting assigned to <d:code>c1</d:code> and <d:code>c3</d:code>. That is why the program
        accepted only second character. The enter after <d:code>float f;</d:code> was assigned to
          <d:code>c1</d:code> and the character entered to <d:code>c2</d:code> and then the RET
        newline to <d:code>c3</d:code>. There is a very simple way to recover from this:</d:para>
      <d:programlisting role="CLexer">// Author: Shiv S. Dayal
// Description: Demo of scanf() function

#include &lt;stdio.h>

int main()
{
  int   i = 0;
  float f = 0.0;
  char  c1 = '\0';
  char  c2 = '\0';
  char  c3 = '\0';

  printf("Enter an integer, a float and three character one by one:\n");
  scanf("%d", &amp;i);
  scanf("%f", &amp;f);
  scanf(" %c", &amp;c1);
  scanf(" %c", &amp;c2);
  scanf(" %c", &amp;c3);

  printf("%d\n", i);
  printf("%f\n", f);
  printf("%c\n", c1);
  printf("%c\n", c2);
  printf("%c\n", c3);

  return 0;
}</d:programlisting>
      <d:para>The whitespace character shown will eat up all the white-space given after the
        previous input. This concludes our discussion on <d:code>printf()</d:code> and
          <d:code>scanf()</d:code>. Now we will move to another set of i/o functions which take
        character string without filtering and print it to screen without filtering. What I am going
        to discuss are <d:code>gets(), fgets(), puts()</d:code> and
        <d:code>fputs()</d:code>.</d:para> 
  </d:sect1>
  <d:sect1>
    <d:indexterm>
      <d:primary>gets function</d:primary>
    </d:indexterm>
    <d:indexterm>
      <d:primary>puts function</d:primary>
    </d:indexterm>
    <d:indexterm>
      <d:primary>fgets function</d:primary>
    </d:indexterm>
    <d:indexterm>
      <d:primary>fputs function</d:primary>
    </d:indexterm>
    <d:title>Character String I/O Functions</d:title>
    <d:para>These functions are very simple compared to
    <d:code>printf()</d:code> and <d:code>scanf()</d:code>. They take a pointer
    to a character array or a character pointer and fill it with input or print
    it to monitor. Note that <d:code>gets()</d:code> and
    <d:code>puts()</d:code> work only with stdin and stdout respectively while
    <d:code>fgets()</d:code> and <d:code>fputs()</d:code> work with
    <d:code>FILE</d:code> streams. They can read and write to file streams that
    is. Here is a sample program:</d:para>
<d:programlisting role="CLexer">// Author: Shiv S. Dayal
// Description : Demo of string i/o
#include &lt;stdio.h>
#include &lt;stdlib.h>

int main()
{
  char cStack[1024] = "";
  char *cHeap = (char*)malloc(sizeof(1024));

  gets(cStack);
  puts(cStack);

  cHeap = fgets(cHeap, 1024, stdin);
  fputs(cHeap, stdout);

  return 0;
}</d:programlisting>
<d:para>and the output is:</d:para>
<d:screen>Hi!
Hi!
Hello!
Hello!</d:screen>
<d:para>First <d:code>"Hi!"</d:code> and <d:code>"Hello!"</d:code> are keyboard
inputs. Do not worry about array and pointer syntax at the moment. Just see the
difference between function calls. Their is a problem with
<d:code>gets()</d:code> that it can cause buffer overflow. If input is bigger
than 1024 bytes including the null terminator then buffer overflow will
happen. Note how you can prevent it with fgets() by specifying the number of
characters you want to read. Rest of input will be ignored by
<d:code>fgets()</d:code>. This is a security hole and therefore you should
never ever use <d:code>gets()</d:code>.</d:para>
<d:para>Time for single character input/output.</d:para>
  </d:sect1>
  <d:sect1>
    <d:indexterm>
      <d:primary>getc function</d:primary>
    </d:indexterm>
    <d:indexterm>
      <d:primary>putc function</d:primary>
    </d:indexterm>
    <d:indexterm>
      <d:primary>getchar function</d:primary>
    </d:indexterm>
    <d:indexterm>
      <d:primary>putchar function</d:primary>
    </d:indexterm>
    <d:indexterm>
      <d:primary>fgetc function</d:primary>
    </d:indexterm>
    <d:indexterm>
      <d:primary>fputc function</d:primary>
    </d:indexterm>
    <d:title>Single Character I/O</d:title>
    <d:para>There are several functions for single character i/o. They are
    <d:code>getc(), putc(), getchar(), putchar(), fgetc()</d:code> and
    <d:code>fputc()</d:code>. Apart from <d:code>getchar()</d:code> and
    <d:code>putchar()</d:code> rest can do any FILE stream-based i/o. Let us
    see them as they are mostly trivial.</d:para>
    <d:programlisting role="CLexer">// Author: Shiv S. Dayal
// Description: Single character funciton demo
#include &lt;stdio.h>

int main()
{
  char c ='';

  c = getchar();
  putchar(c);

  c = getchar();
  putchar(c);

  c = fgetc(stdin);
  fputc(c, stdout);

  c = getchar();
  putchar(c);

  c = getc(stdin);
  putc(c, stdout);

  return 0;
}</d:programlisting>
<d:para>and the output is:</d:para>
<d:screen>4
4
5
5
6
6</d:screen>
<d:para>The first 4, 5 and 6 were keyboard inputs. Note the use of extra
<d:code>getchar()</d:code> and <d:code>putchar()</d:code> to handle the
situation we faced during <d:code>scanf()</d:code>.</d:para>
<d:para>So we have seen many functions and programs for console i/o. File i/o
is still there and will be covered later. This chapter ends here. In
the next chapter we will have operators and expressions.</d:para>
  </d:sect1>
</d:chapter>
