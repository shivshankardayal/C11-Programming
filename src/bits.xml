<?xml version="1.0" encoding="UTF-8"?>
<d:chapter version="5.0" xmlns:d="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2003/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:mml="http://www.w3.org/1998/Math/MathML">
  <?dbhtml filename="bits/index.html" ?>
  <d:title id="bits">Bit manipulation</d:title>
  <d:para>
    By now you have seen all constructs of C programming language. In this
    chapter we will study bit-manipulation using operators provided by C. Bit
    manipulation is considered low-level programming can result in hard to read
    code but can improve performance significantly if done right. Most of the
    bit manipulation involve numbers and in few cases you can apply it to
    characters because characters are internally integers. The key to
    bit-manipulation is bitwise operators <d:code>&amp;, ^, |, !, ~
    &lt;&lt;</d:code> and <d:code>&gt;&gt;</d:code> operators which stand for
    AND, XOR, OR, NOT, bit-flipping, left-shift and right-shift
    operators. Given below is truth table for AND, XOR, and OR gate for quick
    reference.
  </d:para>
  <table
      xmlns="http://docbook.org/ns/docbook" width="40%" frame="border" border="1"
      class="centered">
    <caption>AND gate's truth table</caption>
	  <colgroup width="1*" align="center"/>
	  <colgroup width="1*" align="center"/>
	  <colgroup width="3*" align="center"/>
    <tbody>
      <tr>
        <th>p</th>
        <th>q</th>
        <th>p &amp; q</th>
      </tr>
      <tr>
        <td>0</td>
        <td>0</td>
        <td>0</td>
      </tr>
      <tr>
        <td>0</td>
        <td>1</td>
        <td>0</td>
      </tr>
      <tr>
        <td>1</td>
        <td>0</td>
        <td>0</td>
      </tr>
      <tr>
        <td>1</td>
        <td>1</td>
        <td>1</td>
      </tr>
    </tbody>
  </table>
  <table
      xmlns="http://docbook.org/ns/docbook" width="40%" frame="border" border="1"
      class="centered">
    <caption>OR gate's truth table</caption>
	  <colgroup width="1*" align="center"/>
	  <colgroup width="1*" align="center"/>
	  <colgroup width="3*" align="center"/>
    <tbody>
      <tr>
        <th>p</th>
        <th>q</th>
        <th>p | q</th>
      </tr>
      <tr>
        <td>0</td>
        <td>0</td>
        <td>0</td>
      </tr>
      <tr>
        <td>0</td>
        <td>1</td>
        <td>1</td>
      </tr>
      <tr>
        <td>1</td>
        <td>0</td>
        <td>1</td>
      </tr>
      <tr>
        <td>1</td>
        <td>1</td>
        <td>1</td>
      </tr>
    </tbody>
  </table>
  <table
      xmlns="http://docbook.org/ns/docbook" width="40%" frame="border" border="1"
      class="centered">
    <caption>XOR gate's truth table</caption>
	  <colgroup width="1*" align="center"/>
	  <colgroup width="1*" align="center"/>
	  <colgroup width="3*" align="center"/>
    <tbody>
      <tr>
        <th>p</th>
        <th>q</th>
        <th>p ^ q</th>
      </tr>
      <tr>
        <td>0</td>
        <td>0</td>
        <td>0</td>
      </tr>
      <tr>
        <td>0</td>
        <td>1</td>
        <td>1</td>
      </tr>
      <tr>
        <td>1</td>
        <td>0</td>
        <td>1</td>
      </tr>
      <tr>
        <td>1</td>
        <td>1</td>
        <td>0</td>
      </tr>
    </tbody>
  </table>
  <d:para>
    As you may know there are two gates NAND and NOR which are universal gates
    i.e. all other gates can be constructed by using only NAND or only NOR
    gates. C does not have any operators but that can be easily constructed
    using NOT operator(!) with AND and OR operator. NOT gate which is
    implemented by NOT operator makes true to false and false to true. Given
    below are their truth tables:
  </d:para>
  <table
      xmlns="http://docbook.org/ns/docbook" width="40%" frame="border" border="1"
      class="centered">
    <caption>NAND gate's truth table</caption>
	  <colgroup width="1*" align="center"/>
	  <colgroup width="1*" align="center"/>
	  <colgroup width="3*" align="center"/>
    <tbody>
      <tr>
        <th>p</th>
        <th>q</th>
        <th>!(p &amp; q)</th>
      </tr>
      <tr>
        <td>0</td>
        <td>0</td>
        <td>1</td>
      </tr>
      <tr>
        <td>0</td>
        <td>1</td>
        <td>1</td>
      </tr>
      <tr>
        <td>1</td>
        <td>0</td>
        <td>1</td>
      </tr>
      <tr>
        <td>1</td>
        <td>1</td>
        <td>0</td>
      </tr>
    </tbody>
  </table>
  <table
      xmlns="http://docbook.org/ns/docbook" width="40%" frame="border" border="1"
      class="centered">
    <caption>NOR gate's truth table</caption>
	  <colgroup width="1*" align="center"/>
	  <colgroup width="1*" align="center"/>
	  <colgroup width="3*" align="center"/>
    <tbody>
      <tr>
        <th>p</th>
        <th>q</th>
        <th>!(p | q)</th>
      </tr>
      <tr>
        <td>0</td>
        <td>0</td>
        <td>1</td>
      </tr>
      <tr>
        <td>0</td>
        <td>1</td>
        <td>1</td>
      </tr>
      <tr>
        <td>1</td>
        <td>0</td>
        <td>1</td>
      </tr>
      <tr>
        <td>1</td>
        <td>1</td>
        <td>0</td>
      </tr>
    </tbody>
  </table>
  <d:para>
    The shift operators shift bits to left or right. For example, 1&lt;&lt;2
    means <d:inlineequation><math
    xmlns="http://www.w3.org/1998/Math/MathML"><msup><mn>1</mn><mn>2</mn></msup></math></d:inlineequation>. Similarly,
    23&gt;&gt;3 means <d:inlineequation><math
    xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mn>23</mn><msup><mn>2</mn><mn>3</mn></msup></mfrac></math></d:inlineequation>.
    How this works is that say we have a number 1 represented by 8 bits then it
    would be 00000001 and when we say 1&lt;&lt; then bits are shifted to left
    and right side is filled with 0 thus it becomes 00000010 or 2 which is as
    good as multiplying by 2. If we say 1&lt;&lt;2 then bits are shifted to
    left by 2 position which means the sequence will become 00000100 i.e. which
    is multiplication with 4.
  </d:para>
  <d:sect1>
    <d:title>Basics</d:title>
    <d:para>
      We have discussed this briefly in chapter of <d:quote>Structures and
      Unions</d:quote>. I would like to present that here as well. If the bytes
      for any data type occupy multiple bytes and bytes start with least
      significant byte on lower address then it is a <d:emphasis
      role="italic">little endian</d:emphasis> machine and reverse ordering
      means it is a <d:emphasis role="italic">big endian</d:emphasis>
      machine. Consider the 32-bit number <d:code>0x04030201</d:code> whose
      address is <d:code>0xX</d:code> then it would look like following in
      memory.
    </d:para>
    <d:screen>
adr: 0xX 0xX+1 0xX+2 0xX+3
mem: 0x4 0x3   0x2   0x1    // big endian
mem: 0x1 0x2   0x3   0x4    // little endian
    </d:screen>
    <d:para>
      The difference becomes evident if you want to cast it to some lower
      type. Let us say above value is V and we cast it to a
      <d:code>char c</d:code> as <d:code>char c = *(char*)&amp;V;</d:code> then
      for big endian machines it will be 0x1 and for little endian machine it
      will be 0x4. Note that nowadays popular architecture like x86 are little
      endian but network bytes are big endian thus to write portable code
      people generally transfer bytes from host to network by calling functions
      <d:code>hton</d:code>. Discussion of such functions is out of scope of
      this book but this should give you a hint.
    </d:para>
  </d:sect1>
  <d:sect1>
    <d:title>Shifts and Division</d:title>
    <d:para>
      We have studied that right shift and division are same but that is not
      entirely true. Consider the following code:
    </d:para>
    <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>

int main()
{
  int i = 0xffffffff; // all bit one
  unsigned int ui = 0xffffffff; // again all bits one

  printf("%d %u\n", i>>1, ui>> 1);

	return 0;
}]]>
    </d:programlisting>
    <d:para>
      we compile it to object code using the command <d:code>$gcc -c
      test.c</d:code> where <d:code>test.c</d:code> is the filename to which we
      saved the source. Now we see assembly source using the command
      <d:code>objdump -d -M gas -S test.o</d:code> and we have the following:
    </d:para>
    <d:screen>test.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 &lt;;main&gt;:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%rbp)
   f:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  16:	8b 45 fc             	mov    -0x4(%rbp),%eax
  19:	d1 e8                	shr    %eax
  1b:	89 c2                	mov    %eax,%edx
  1d:	8b 45 f8             	mov    -0x8(%rbp),%eax
  20:	d1 f8                	sar    %eax
  22:	89 c6                	mov    %eax,%esi
  24:	bf 00 00 00 00       	mov    $0x0,%edi
  29:	b8 00 00 00 00       	mov    $0x0,%eax
  2e:	e8 00 00 00 00       	callq  33 &lt;main+0x33&gt;
  33:	b8 00 00 00 00       	mov    $0x0,%eax
  38:	c9                   	leaveq 
  39:	c3                   	retq
    </d:screen>
    <d:para>
      As you can clearly see signed integer is getting an <d:code>shr</d:code>
      instruction while unsigned integer is getting an <d:code>sar</d:code>
      instruction which causes -1 to remain -1 while unsigned number is divided
      by 2. These two are known as <d:emphasis
      role="italic">logical</d:emphasis> and <d:emphasis
      role="italic">arithmetic</d:emphasis> shifts. The difference can cause
      you to debug your program for several hours. In other words, division
      with signed types rounds toward zero, as one would expect, but right
      shift is a division (by a power of 2) that rounds to
      <d:inlineequation><math
                            xmlns="http://www.w3.org/1998/Math/MathML"><mo>-</mo><mo>&#8734;</mo></math></d:inlineequation>. The arithmetical shift (sar in the above fragment) fills in ones or
      zeros, according to the most significant bit of the original number.
    </d:para>
    <d:para>
      Note that the C standard leaves the behavior of a right shift of a signed
      integer as <d:quote>implementation-defined</d:quote>. The behavior shown
      (that a negative value remains negative after right shift for signed
      integers) is the default behavior of gcc. This is clearly stated in
      subclause 5 of &#xa7; iso.6.5.7.
    </d:para>
  </d:sect1>
  <d:sect1>
    <d:title>2's Complement</d:title>
    <d:para>
      Consider the following program:
    </d:para>
    <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>
#include <limits.h>

int main()
{
  int i = INT_MIN; // 0xa0000000

  printf("%d\n", i);
  if(i < 0)
    i = -i;

  printf("%d\n", i);

	return 0;
}]]>
    </d:programlisting>
    <d:para>
      and the output is not trivial to guess. The output is:
    </d:para>
    <d:screen>-2147483648
-2147483648
      </d:screen>
      <d:para>
        As I had told that 0 and -0 have same
        representation in 2's complement in our first chapter. But even
        <d:code>INT_MIN</d:code> or for that matter 
        <d:code>LONG_MIN</d:code> or <d:code>LLONG_MIN</d:code> will have same
        representation as their negative of <d:code>INT_MIN</d:code> or
        <d:code>LONG_MIN</d:code> <d:code>LLONG_MIN</d:code>. This is the
        reason why the above code does not work as expected. For this reason
        alone following program prints negative number where family of
        absolute-value funcitons fail.
      </d:para>
      <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

int main()
{
  int n;

  printf("In this program we will try to computer absolute value for integers entered.\n");
  scanf("%d", &n);
  printf("%d\n", abs(n));
  
  printf("Now is the time for surprise.\n");
  printf("%d %ld %Ld\n", abs(INT_MIN), labs(LONG_MIN), llabs(LLONG_MIN));

  return 0;
}]]>
      </d:programlisting>
      <d:para>
        This entire chaos erupts because since the numbers are split into two
        ranges and 0 unbalances it thus <d:code>INT_MIN</d:code> has an
        absolute value larger than <d:code>INT_MAX</d:code>. The same applies
        for other integral data types as well.
      </d:para>
      <d:para>
        Another issue with shifts is that you cannot shift for entire width of
        the data type. For example, consider the following program on a 64-bit
        computer
      </d:para>
      <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>

int main()
{
  unsigned int i = 0;
  unsigned long l = 0;

  printf("%u %lu\n", i>>32, l>>64);
  return 0;
}]]>
      </d:programlisting>
      <d:para>
        and gcc will immediately give you following warnings:
      </d:para>
      <d:screen><![CDATA[test.c: In function ‘main’:
test.c:5:3: warning: right shift count >= width of type [enabled by default]
   printf("%d \n", ~0 >> 32);
   ^
test.c:6:3: warning: right shift count >= width of type [enabled by default]
   printf("%ld \n", ~0UL >> 64);
   ^]]>
      </d:screen>
      <d:para>
        However, we are lucky that output is consistent in both the cases and
        is 0 at least on my Intel CPU. This may not be the case on other CPUs
        thus be careful when you want to shift a number which is equal or
        greater than the width of that type.
      </d:para>
  </d:sect1>
  <d:sect1>
    <d:title>Average of two numbers</d:title>
    <d:para>
      Let us consider calculation of average of two unsigned integers. A naive
      approach is given below:
      <d:programlisting role="CLexer" language="c"><![CDATA[#include <stdio.h>

int main()
{
  unsigned int i =100;
  unsigned int j = 100;

  printf("%u\n", (i+j)/2);
  return 0;
}]]>
      </d:programlisting>
      Now as you can easily guess output would be 100 but if the sum is greater
      than <d:code>UINT_MAX</d:code> then it will cause integer overflow which
      is not a desirable case. Another better but still naive argument would be
      to cast these to higher data type such as <d:code>unsigned long</d:code>.
      
    </d:para>
  </d:sect1>
</d:chapter>
