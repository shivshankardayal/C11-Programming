<d:chapter version="5.0" xmlns:d="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:mml="http://www.w3.org/1998/Math/MathML">
  <?xml-stylesheet href="../css/style.css" type="text/css"?>
    <?dbhtml filename="fenv/index.html" ?>
    <d:title>Floating-point environment &lt;fenv.h&gt;</d:title>
    <d:para>The header &lt;fenv.h&gt; declares two types and several macros
    and functions to provide access to the floating-point environment. The
    <d:emphasis role="italic">floating-point environment</d:emphasis> refers
    collectively to any floating-point status 
    flags and control modes supported by the
    implementation.<d:footnote><d:para>This header is designed to support the
    floating-point exception status flags and directed-rounding control modes
    required by IEC 60559, and other similar floating-point state
    information. Also it is designed to facilitate code portability among all
    systems.</d:para></d:footnote> A <d:emphasis role="italic">floating-point
    status flag</d:emphasis> is a system 
    variable whose value is set (but never cleared) when a <d:emphasis
    role="italic">floating-point exception</d:emphasis> is raised, which occurs
    as a side effect of exceptional 
    floating-point arithmetic to provide auxiliary
    information.<d:footnote><d:para>A floating-point status flag is not an
    object and can be set more than once within an
    expression.</d:para></d:footnote> A
    <d:emphasis role="italic">floating-point control mode</d:emphasis> is a
    system variable whose value may be set by
    the user to affect the subsequent behavior of floating-point
    arithmetic.</d:para>
    <d:para>
      The floating-point environment has thread storage duration. The initial
      state for a thread’s floating-point environment is the current state of
      the floating-point environment of the thread that creates it at the time
      of creation.
    </d:para>
    <d:para>Certain programming conventions support the intended model of use
    for the floating-point environment:<d:footnote><d:para>With these
    conventions, a programmer can safely assume default floating-point control
    modes (or be unaware of them). The responsibilities associated with
    accessing the floating-point environment fall on the programmer or program
    that does so explicitly.</d:para></d:footnote></d:para>
    <d:itemizedlist>
      <d:listitem>
	<d:para>a function call does not alter its caller's floating-point
	control modes, clear its caller’s floating-point status flags, nor
	depend on the state of its caller’s floating-point status flags unless
	the function is so documented;</d:para>
      </d:listitem>
      <d:listitem>
	<d:para>a function call is assumed to require default floating-point
	control modes, unless its documentation promises otherwise;</d:para>
      </d:listitem>
      <d:listitem>
	<d:para>a function call is assumed to have the potential for raising
	floating-point exceptions, unless its documentation promises
	otherwise.</d:para>
      </d:listitem>
    </d:itemizedlist>
    <d:para>The type
    <d:blockquote>
      <d:para><d:code>fenv_t</d:code></d:para>
    </d:blockquote>
    represents the entire
    floating-point environment.</d:para>
    <d:para>The type
    <d:blockquote>
      <d:para><d:code>fexcept_t</d:code></d:para>
    </d:blockquote>
    represents the floating-point
    status flags collectively, including any status the implementation
    associates with the flags.</d:para>
    <d:para>Each of the macros:</d:para>
    <d:blockquote>
      <d:para><d:code>FE_DIVBYZERO</d:code></d:para>
    </d:blockquote>
    <d:blockquote>
      <d:para><d:code>FE_INEXACT</d:code></d:para>
    </d:blockquote>
    <d:blockquote>
      <d:para><d:code>FE_INVALID</d:code></d:para>
    </d:blockquote>
    <d:blockquote>
      <d:para><d:code>FE_OVERFLOW</d:code></d:para>
    </d:blockquote>
    <d:blockquote>
      <d:para>
        <d:code>FE_UNDERFLOW</d:code>
      </d:para>
    </d:blockquote>
<d:para>is defined if and only if the implementation supports the
floating-point exception by means of the functions in
&#xa7; iso.7.6.2.<d:footnote><d:para>The implementation supports an exception if there
are circumstances where a call to at least one of the functions in &#xa7; iso.7.6.2,
using the macro as the appropriate argument, will succeed. It is not necessary
for all the functions to succeed all the time.</d:para></d:footnote> Additional
implementation-defined floating-point exceptions, with macro definitions
beginning with <d:code>FE_</d:code> and an uppercase
letter,<d:footnote><d:para>See <d:quote>future library directions</d:quote>
(&#xa7; iso.7.31.4).</d:para></d:footnote> may also be 
specified by the implementation. The defined macros expand to integer constant
expressions with values such that bitwise <d:code>OR</d:code>s of all
combinations of the macros result in distinct values.</d:para>
<d:para>The macro
<d:blockquote>
  <d:para><d:code>FE_ALL_EXCEPT</d:code></d:para>
</d:blockquote>
is simply the bitwise
<d:code>OR</d:code> of all floating-point exception macros defined by the
implementation. If no such macros are defined, <d:code>FE_ALL_EXCEPT</d:code>
shall be defined as 0.</d:para>
<d:para>Each of the macros:</d:para>
<d:blockquote>
  <d:para><d:code>FE_DOWNWARD</d:code></d:para>
  <d:para><d:code>FE_TONEAREST</d:code></d:para>
  <d:para><d:code>FE_TOWARDZERO</d:code></d:para>
  <d:para><d:code>FE_UPWARD</d:code></d:para>
</d:blockquote>
<d:para>is defined if and only if the implementation supports getting and
setting the represented rounding direction by means of the fegetround and
fesetround functions. Additional implementation-defined rounding directions,
with macro definitions beginning with FE_ and an uppercase
letter,<d:footnote><d:para>See <d:blockquote>future library
directions</d:blockquote> (&#xa7; iso.7.31.4).</d:para></d:footnote> may also
be
specified by the implementation. The defined macros expand to integer constant
expressions whose values are distinct nonnegative
values.<d:footnote><d:para>Even though the rounding direction macros may expand
to constants corresponding to the values of <d:code>FLT_ROUNDS</d:code>, they
are not required to do so.</d:para></d:footnote></d:para>
<d:para>The macro
<d:blockquote>
  <d:para><d:code>FE_DFL_ENV</d:code></d:para>
</d:blockquote>
represents the default
floating-point environment - the one installed at program startup - and has
type <d:quote>pointer to const-qualified <d:code>fenv_t</d:code></d:quote>. It
can be used as an 
argument to <d:code>&amp;lt;fenv.h&gt;</d:code> functions that manage the
floating-point
environment.</d:para>
<d:para>Additional implementation-defined environments, with macro definitions
beginning with <d:code>FE_</d:code> and an uppercase letter, and having type
<d:quote>pointer to const-qualified <d:code>fenv_t</d:code></d:quote>, may also
be specified by
the implementation.</d:para>
<d:sect1 id="fenv_access">
  <d:title>The FENV_ACCESS pragma</d:title>
<d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
<d:programlisting role="CLexer">#include &lt;fenv.h>
#pragma STDC FENV_ACCESS on-off-switch</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>FENV_ACCESS</d:code> pragma provides a means to inform the
implementation when a program might access the floating-point environment to
test floating-point status flags or run under non-default floating-point
control modes.<d:footnote><d:para>The purpose of the
<d:code>FENV_ACCESS</d:code> pragma is to allow certain optimizations that
could subvert flag tests and mode changes (e.g., global common subexpression
elimination, code motion, and constant folding). In general, if the state of
<d:code>FENV_ACCESS</d:code> is <d:quote>off</d:quote>, the translator can
assume that default 
modes are in effect and the flags are not tested.</d:para></d:footnote> The
pragma shall occur either outside external declarations or preceding all
explicit declarations and statements inside a compound statement. When outside
external declarations, the pragma takes effect from its occurrence until
another <d:code>FENV_ACCESS</d:code> pragma is encountered, or until the end of
the translation unit. When inside a compound statement, the pragma takes effect
from its occurrence until another <d:code>FENV_ACCESS</d:code> pragma is
encountered (including within a nested compound statement), or until the end of
the compound statement; at the end of a compound statement the state for the
pragma is restored to its condition just before the compound statement. If this
pragma is used in any other context, the behavior is undefined. If part of a
program tests floating-point status flags, sets floating-point control modes,
or runs under non-default mode settings, but was translated with the state for
the <d:code>FENV_ACCESS</d:code> pragma <d:quote>off</d:quote>, the behavior is undefined. The
default state (<d:quote>on</d:quote> or <d:quote>off</d:quote>) for the pragma
is implementation-defined. (When 
execution passes from a part of the program translated with
<d:code>FENV_ACCESS</d:code> <d:quote>off</d:quote> to a part translated with
<d:code>FENV_ACCESS</d:code> <d:quote>on</d:quote>, the state of the floating-point status flags
is unspecified and the floating-point control modes have their default
settings.)</d:para>
<d:para>EXAMPLE</d:para>
<d:programlisting role="CLexer">#include &lt;fenv.h>
void f(double x)
{
  #pragma STDC FENV_ACCESS ON
  void g(double);
  void h(double);
  /* ... */
  g(x + 1);
  h(x + 1);
  /* ... */
}</d:programlisting>
<d:para>If the function <d:code>g</d:code> might depend on status flags set as
a side effect of the first <d:code>x + 1</d:code>, or if the second <d:code>x +
1</d:code> might depend on control modes set as a side effect of the call to
function <d:code>g</d:code>, then the program shall contain an appropriately
placed invocation of <d:code>#pragma STDC FENV_ACCESS
ON</d:code>.<d:footnote><d:para>The side effects impose a temporal ordering
that requires two evaluations of <d:code>x + 1</d:code>. On the other hand,
without the <d:code>#pragma STDC FENV_ACCESS ON</d:code> pragma, and assuming
the default state is "off", just one evaluation of <d:code>x + 1</d:code> would
suffice.</d:para></d:footnote></d:para>
</d:sect1>
<d:sect1>
  <d:title>Floating-point exceptions</d:title>
  <d:para>The following functions provide access to the floating-point status
  flags.<d:footnote><d:para>The functions <d:code>fetestexcept,
  feraiseexcept</d:code> and <d:code>feclearexcept</d:code> support the basic
  abstraction of flags that are either set or clear. An implementation may
  endow floating-point status flags with more information - for example, the
  address of the code which first raised the floating-point exception; the
  functions <d:code>fegetexceptflag</d:code> and
  <d:code>fesetexceptflag</d:code> deal with the full content of
  flags.</d:para></d:footnote> The <d:code>int</d:code> input argument for the
  functions represents a subset of floating-point exceptions, and can be zero
  or the bitwise OR of one or more floating-point exception macros, for example
  <d:code>FE_OVERFLOW | FE_INEXACT</d:code>. For other argument values the
  behavior of these functions is undefined.</d:para>
  <d:sect2>
    <d:title>The feclearexcept function</d:title>
<d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
<d:programlisting role="CLexer">#include &lt;fenv.h>
int feclearexcept(int excepts);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>feclearexcept</d:code> function attempts to clear the
supported floating-point exceptions represented by its argument.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>feclearexcept</d:code> function returns zero if the excepts
argument is zero or if all the specified exceptions were addition. This
identifier has one of the following values:</d:para>
  </d:sect2>
  <d:sect2>
    <d:title>The fegetexceptflag function</d:title>
    <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
    <d:programlisting role="CLexer">#include &lt;fenv.h>
int fegetexceptflag(fexcept_t *flagp, int excepts);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>fegetexceptflag</d:code> function attempts to store an
implementation-defined representation of the states of the floating-point
status flags indicated by the argument excepts in the object pointed to by the
argument <d:code>flagp</d:code>.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>fegetexceptflag</d:code> function returns zero if the
representation was successfully stored. Otherwise, it returns a nonzero
value.</d:para>
  </d:sect2>
  <d:sect2>
    <d:title>The feraiseexcept function</d:title>
    <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
    <d:programlisting role="CLexer">#include &lt;fenv.h>
int feraiseexcept(int excepts);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>feraiseexcept</d:code> function attempts to raise the
supported floating-point exceptions represented by its
argument.<d:footnote><d:para>The effect is intended to be similar to that of
floating-point exceptions raised by arithmetic operations. Hence, enabled traps
for floating-point exceptions raised by this function are taken. The
specification in F.7.6 of specification is in the same
spirit.</d:para></d:footnote> The order in which these floating-point
exceptions are raised is unspecified, except as stated in F.7.6 of
specification. Whether the feraiseexcept function additionally raises the
<d:quote>inexact</d:quote> floating-point exception whenever it raises the
<d:quote>overflow</d:quote> or 
<d:quote>underflow</d:quote> floating-point exception is implementation-defined.</d:para>
<d:para><d:emphasis role="bold">Return</d:emphasis></d:para>
<d:para>The <d:code>feraiseexcept</d:code> function returns zero if the excepts
argument is zero or if all the specified exceptions were successfully
raised. Otherwise, it returns a nonzero value.</d:para>
  </d:sect2>
  <d:sect2>
    <d:title>The fesetexceptflag function</d:title>
    <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
    <d:programlisting role="CLexer">#include &lt;fenv.h>
int fesetexceptflag(const fexcept_t *flagp, int excepts);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>fesetexceptflag</d:code> function attempts to set the
floating-point status flags indicated by the argument excepts to the states
stored in the object pointed to by <d:code>flagp</d:code>. The value of
<d:code>*flagp</d:code> shall have been set by a previous call to
<d:code>fegetexceptflag</d:code> whose second argument represented at least
those floating-point exceptions represented by the argument excepts. This
function does not raise floating-point exceptions, but only sets the state of
the flags.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>fesetexceptflag</d:code> function returns zero if the
excepts argument is zero or if all the specified flags were successfully set to
the appropriate state. Otherwise, it returns a nonzero value.</d:para>
  </d:sect2>
  <d:sect2>
    <d:title>The fetestexcept function</d:title>
    <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
    <d:programlisting role="CLexer">#include &lt;fenv.h>
int fetestexcept(int excepts);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The fetestexcept function determines which of a specified subset of the
floating-point exception flags are currently set. The excepts argument
specifies the floating-point status flags to be
queried.<d:footnote><d:para>This mechanism allows testing several
floating-point exceptions with just one function call.</d:para><d:para>EXAMPLE
Call <d:code>f</d:code> if "invalid" is set, then <d:code>g</d:code> if
"overflow" is set:</d:para><d:programlisting role="CLexer">#include &lt;fenv.h>
/* ... */
{
  #pragma STDC FENV_ACCESS ON
  int set_excepts;
  feclearexcept(FE_INVALID | FE_OVERFLOW);
  // maybe raise exceptions
  set_excepts = fetestexcept(FE_INVALID | FE_OVERFLOW);
  if (set_excepts &amp; FE_INVALID) f();
  if (set_excepts &amp; FE_OVERFLOW) g();
  /* ... */
}</d:programlisting></d:footnote></d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>fetestexcept</d:code> function returns the value of the
bitwise OR of the floating-point exception macros corresponding to the
currently set floating-point exceptions included in
<d:code>excepts</d:code>.</d:para>
  </d:sect2>
</d:sect1>
<d:sect1>
  <d:title>Rounding</d:title>
  <d:para>The <d:code>fegetround</d:code> and <d:code>fesetround</d:code>
  functions provide control of rounding direction modes.</d:para>
  <d:sect2>
    <d:title>The fegetround function</d:title>
    <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
    <d:programlisting role="CLexer">#include &lt;fenv.h>
int fegetround(void);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>fegetround</d:code> function gets the current rounding
direction.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>fegetround</d:code> function returns the value of the
rounding direction macro representing the current rounding direction or a
negative value if there is no such rounding direction macro or the current
rounding direction is not determinable.</d:para>
  </d:sect2>
  <d:sect2>
    <d:title>The fesetround function</d:title>
    <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
    <d:programlisting role="CLexer">#include &lt;fenv.h>
int fesetround(int round);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>fesetround</d:code> function establishes the rounding
direction represented by its argument round. If the argument is not equal to
the value of a rounding direction macro, the rounding direction is not
changed.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>fesetround</d:code> function returns zero if and only if
the requested rounding direction was established.</d:para>
<d:para>EXAMPLE Save, set, and restore the rounding direction. Report an error
and abort if setting the rounding direction fails.</d:para>
<d:programlisting role="CLexer">#include &lt;fenv.h>
#include &lt;assert.h>
void f(int round_dir)
{
  #pragma STDC FENV_ACCESS ON
  int save_round;
  int setround_ok;
  save_round = fegetround();
  setround_ok = fesetround(round_dir);
  assert(setround_ok == 0);
  /* ... */
  fesetround(save_round);
  /* ... */
}</d:programlisting>
  </d:sect2>
  </d:sect1>
  <d:sect1>
    <d:title>Environment</d:title>
    <d:para>The functions in this section manage the floating-point environment
    - status flags and control modes - as one entity.</d:para>
    <d:sect2>
      <d:title>The fegetenv function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer">#include &lt;fenv.h>
int fegetenv(fenv_t *envp);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>fegetenv</d:code> function attempts to store the current
floating-point environment in the object pointed to by envp.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>fegetenv</d:code> function returns zero if the environment
was successfully stored. Otherwise, it returns a nonzero value.</d:para>
    </d:sect2>
    <d:sect2>
      <d:title>The feholdexcept function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer">#include &lt;fenv.h>
int feholdexcept(fenv_t *envp);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>feholdexcept</d:code> function saves the current
floating-point environment in the object pointed to by <d:code>envp</d:code>,
clears the floating-point status flags, and then installs a non-stop (continue
on floating-point exceptions) mode, if available, for all floating-point
exceptions.<d:footnote><d:para>IEC 60559 systems have a default non-stop mode,
and typically at least one other mode for trap handling or aborting; if the
system provides only the non-stop mode then installing it is trivial. For such
systems, the <d:code>feholdexcept</d:code> function can be used in conjunction
with the <d:code>feupdateenv</d:code> function to write routines that hide
spurious floating-point exceptions from their
callers.</d:para></d:footnote></d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>feholdexcept</d:code> function returns zero if and only if
non-stop floating-point exception handling was successfully installed.</d:para>
    </d:sect2>
    <d:sect2>
      <d:title>The fesetenv function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer">#include &lt;fenv.h>
int fesetenv(const fenv_t *envp);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>fesetenv</d:code> function attempts to establish the
floating-point environment represented by the object pointed to by
<d:code>envp</d:code>. The argument envp shall point to an object set by a call
to <d:code>fegetenv</d:code> or <d:code>feholdexcept</d:code>, or equal a
floating-point environment macro. Note that fesetenv merely installs the state
of the floating-point status flags represented through its argument, and does
not raise these floating-point exceptions.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>fesetenv</d:code> function returns zero if the environment
was successfully established. Otherwise, it returns a nonzero value.</d:para>
    </d:sect2>
    <d:sect2>
      <d:title>The feupdateenv function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer">#include &lt;fenv.h>
int feupdateenv(const fenv_t *envp);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>feupdateenv</d:code> function attempts to save the
currently raised floating-point exceptions in its automatic storage, install
the floating-point environment represented by the object pointed to by
<d:code>envp</d:code>, and then raise the saved floating-point exceptions. The
argument <d:code>envp</d:code> shall point to an object set by a call to
<d:code>feholdexcept</d:code> or <d:code>fegetenv</d:code>, or equal a
floating-point environment macro.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>feupdateenv</d:code> function returns zero if all the
actions were successfully carried out. Otherwise, it returns a nonzero
value.</d:para>
<d:para>EXAMPLE Hide spurious underflow floating-point exceptions:</d:para>
<d:programlisting role="CLexer">#include &lt;fenv.h>
double f(double x)
{
  #pragma STDC FENV_ACCESS ON
  double result;
  fenv_t save_env;
  if (feholdexcept(&amp;save_env))
    return /* indication of an environmental problem */;
  // compute result
  if (/* test spurious underflow */)
    if (feclearexcept(FE_UNDERFLOW))
      return /* indication of an environmental problem */;
  if (feupdateenv(&amp;save_env))
    return /* indication of an environmental problem */;
  return result;
}</d:programlisting>
    </d:sect2>
  </d:sect1>
</d:chapter>
