<?xml version="1.0" encoding="UTF-8"?>
<d:chapter version="5.0" xmlns:d="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2003/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:mml="http://www.w3.org/1998/Math/MathML">
  <?dbhtml filename="signal/index.html" ?>
  <d:title>Signal handling &lt;signal.h&gt;</d:title>
  <d:para>The header <d:code>&lt;signal.h&gt;</d:code> declares a type and two
  functions and defines several macros, for handling various signals
  (conditions that may be reported during program execution).</d:para>
  <d:para>The type defined is</d:para>
  <d:blockquote><d:para><d:code>sig_atomic_t</d:code></d:para></d:blockquote>
  <d:para>which is the (possibly volatile-qualified) integer type of an object
  that can be accessed as an atomic entity, even in the presence of
  asynchronous interrupts.</d:para>
  <d:para>The macros defiend are</d:para>
  <d:blockquote><d:para><d:code>SIG_DFL</d:code></d:para>
  <d:para><d:code>SIG_ERR</d:code></d:para>
  <d:para><d:code>SIG_IGN</d:code></d:para></d:blockquote>
  <d:para>which expand to constant expressions with distinct values that have
  type compatible with the second argument to, and the return value of, the
  <d:code>signal</d:code> function, and whose values compare unequal to the
  address of any declarable function; and the following, which expand to
  positive integer constant expressions with type <d:code>int</d:code> and
  distinct values that are the signal numbers, each corresponding to the
  specified condition:</d:para>
  <d:blockquote><d:para><d:code>SIGABRT</d:code> abnormal termination, such as
  is initiated by the <d:code>abort</d:code> function</d:para>
  <d:para><d:code>SIGFPE</d:code>  an erroneous arithmetic operation, such as
  zero divide or an operation resulting in overflow</d:para>
  <d:para><d:code>SIGILL</d:code> detection of an invalid function image, such
  as an invalid instruction</d:para>
  <d:para><d:code>SIGINT</d:code> receipt of an interactive attention
  signal</d:para>
  <d:para><d:code>SIGSEGV</d:code> an invalid access to storage</d:para>
  <d:para><d:code>SIGTERM</d:code> a termination request sent to the
  program</d:para></d:blockquote>
  <d:para>An implementation need not generate any of these signals, except as a
  result of explicit calls to the <d:code>raise</d:code> function. Additional
  signals and pointers to undeclarable functions, with macro definitions
  beginning, respectively, with the letters SIG and an uppercase letter or with
  <d:code>SIG_</d:code> and an uppercase letter,<d:footnote><d:para>The names
  of the signal numbers reflect the following terms (respectively): abort,
  floating-point exception, illegal instruction, interrupt, segmentation
  violation, and termination.</d:para></d:footnote> may also be specified by
  the implementation. The complete set of signals, their semantics, and their
  default handling is implementation-defined; all signal numbers shall be
  positive.</d:para>
  <d:sect1>
    <d:title>Specify signal handling</d:title>
    <d:sect2>
      <d:title>The signal function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer">#include &lt;signal.h>
void (*signal(int sig, void (*func)(int)))(int);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>signal</d:code> function chooses one of three ways in which
receipt of the signal number <d:code>sig</d:code> is to be subsequently
handled. If the value of func is <d:code>SIG_DFL</d:code>, default handling for
that signal will occur. If the value of func is <d:code>SIG_IGN</d:code>, the
signal will be ignored. Otherwise, func shall point to a function to be called
when that signal occurs. An invocation of such a function because of a signal,
or (recursively) of any further functions called by that invocation (other than
functions in the standard library), is called a <d:emphasis role="italic">signal
handler</d:emphasis>.</d:para>
<d:para>When a signal occurs and <d:code>func</d:code> points to a function, it
is implementation-defined whether the equivalent of <d:code>signal(sig,
SIG_DFL);</d:code> is executed or the implementation prevents some
implementation-defined set of signals (at least including <d:code>sig</d:code>)
from occurring until the current signal handling has completed; in the case of
<d:code>SIGILL</d:code>, the implementation may alternatively define that no
action is taken. Then the equivalent of <d:code>(*func)(sig);</d:code> is
executed. If and when the function returns, if the value of sig is
<d:code>SIGFPE, SIGILL, SIGSEGV</d:code> or any other implementation-defined
value corresponding to a computational exception, the behavior is undefined;
otherwise the program will resume execution at the point it was
interrupted.</d:para>
<d:para>If the signal occurs as the result of calling the
<d:code>abort</d:code> or <d:code>raise</d:code> function, the signal handler
shall not call the raise function.</d:para>
<d:para>If the signal occurs other than as the result of calling the
<d:code>abort</d:code> or <d:code>raise</d:code> function, the behavior is
undefined if the signal handler refers to any object with static storage
duration other than by assigning a value to an object declared as
<d:code>volatile sig_atomic_t</d:code> or the signal handler calls any function
in the standard library other than the abort function, the
<d:code>_Exit</d:code> function or the <d:code>signal</d:code> function with
the first argument equal to the signal number corresponding to the signal that
caused the invocation of the handler. Furthermore, if such a call to the
<d:code>signal</d:code> function results in a <d:code>SIG_ERR</d:code> return,
the value of <d:code>errno</d:code> is indeterminate.<d:footnote><d:para>If any
signal is generated by an asynchronous signal handler, the behavior is
undefined.</d:para></d:footnote></d:para>
<d:para>At program startup, the equivalent of</d:para>
<d:programlisting role="CLexer">signal(sig, SIG_IGN);</d:programlisting>
<d:para>may be executed for some signals selected in an implementation-defined
manner; the equivalent of</d:para>
<d:programlisting role="CLexer">signal(sig, SIG_DFL);</d:programlisting>
<d:para>is executed for all other signals defined by the
implementation.</d:para>
<d:para>The implementation shall behave as if no library function calls the
<d:code>signal</d:code> function.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>If the request can be honored, the <d:code>signal</d:code> function
returns the value of <d:code>func</d:code> for the most recent successful call
to <d:code>signal</d:code> for the specified signal
<d:code>sig</d:code>. Otherwise, a value of <d:code>SIG_ERR</d:code> is
returned and a positive value is stored in <d:code>errno</d:code>.</d:para>
<d:para><d:emphasis role="bold">Forward references:</d:emphasis> <d:xref
linkend="abort" />, <d:xref linkend="exit" />, <d:xref linkend="_Exit" />,
<d:xref linkend="at_quick_exit" />.
</d:para>
    </d:sect2>
  </d:sect1>
  <d:sect1>
    <d:title>Send signal</d:title>
    <d:sect2>
      <d:title>The raise function</d:title>
      <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
      <d:programlisting role="CLexer">#include &lt;signal.h>
int raise(int sig);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>raise</d:code> function carries out the actions described
in The signal function for the signal <d:code>sig</d:code>. If a signal handler
is called, the <d:code>raise</d:code> function shall not return until after the
signal handler does.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>raise</d:code> function returns zero if successful, nonzero
if unsuccessful.</d:para>
    </d:sect2>
  </d:sect1>
</d:chapter>
