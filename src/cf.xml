<d:chapter version="5.0" xmlns:d="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:mml="http://www.w3.org/1998/Math/MathML">
  <?xml-stylesheet href="../css/style.css" type="text/css"?>
    <?dbhtml filename="cf/index.html" ?>
      <d:title>Control Flow</d:title>
      <d:para>There are three things you will learn in this chapter. Switching
      the path of execution in program depending upon program variables or
      states using control statements. Repeating a set of instructions using
      loops. Bypassing certain set of instructions in a loop and jump
      around. Collectively, these elements of C allow or enable you to take
      driverâ€™s seat over the control over a C program. You will spend much of
      your programming time even in future using these basic elements. Let us
      begin with if-else without spending much time over boring stuff. Before
      we proceed I would like to tell you about storage classes of array and
      their scope. I could have covered it in second chapter but I did not want
      to scare you with too many things in itself.</d:para>
      <d:sect1>
        <d:indexterm>
          <d:primary>if else statement</d:primary>
        </d:indexterm>
	<d:title>if else Statement</d:title>
	<d:para>An if-else statement may consist of only <d:code>if</d:code> or
	both <d:code>if</d:code> and <d:code>else</d:code> or
	<d:code>if</d:code> and <d:code>else if</d:code> or <d:code>if, else
	if</d:code> and <d:code>else</d:code>. An if-else statement must have
	<d:code>if</d:code> at the beginning, zeor or more <d:code>else
	if</d:code> may come after <d:code>if</d:code> or before
	<d:code>else</d:code> and <d:code>else</d:code> must come at
	end. <d:code>else if</d:code> and <d:code>else</d:code> are optional
	and may not come. Consider the following program:</d:para>
	<d:programlisting role="CLexer">//Description : Demo of if-else statements.

#include &lt;stdio.h>

int main()
{
  int i = 0, j= 0;

  printf("Please enter two integers i and j:\n");
  scanf("%d%d", &amp;i , &amp;j);

  if(i==4)
    printf("you entered 4 for i.\n");

  if(i==7)
  {
    printf("you entered 7 for i.\n");
    printf("I am happy for you.\n");
  }
  else
  {
    printf("You did not enter 7 for i.\n");
  }
  if(i==7)
  {
    printf("you entered 7 for i.\n");
    printf("I am happy for you.\n");
  }
  else if(j==8)
    printf("You entered 8 for i.\n");

  if(i==7)
    printf("you entered my lucky number.\n");
  else if((i==7) &amp;&amp;(j==8))
    printf("May god bless you!\n");
  else
    printf("You entered bad number.\n");

  return 0;
}</d:programlisting>
and the output is:
<d:screen>Please enter two integers i and j:
4
6
you entered 4 for i.
You did not enter 7 for i.
You entered bad number.</d:screen>
<d:para>As you can see from first if sttatement that if you enter the value of
i as 4 then the printf will be executed and you will be able to see it. Note
that if there are multiple lines below if which you want to execute then you
must put them in a block using curly braces. If you just want to execute one
line then these curly braces are optional. Note that how you must use curly
braces if you have more than one line and you want to execute them. Also, see
the syntax for missing else and missing else if. One if-else can be nested
inside another for example see the following code:</d:para>
<d:programlisting role="CLexer">//Author: Shiv S. Dayal
//Description : Demo of if-else statements.

#include &lt;stdio.h>
#include &lt;string.h>

int main()
{
  char fName[128]={0}, lName[128]={0};

  printf("Enter your first name and last name in that order:\n");
  gets(fName);
  gets(lName);

  if(strcmp(fName, "Shiv") == 0)
  {
    if(strcmp(lName, "Dayal") == 0)
      printf("Your name is Shiv Dayal.\n");
  }
  else
  {
    printf("Your name is %s %s.\n", fName, lName);
  }

  return 0;
}</d:programlisting>
and the output is:
<d:screen>Enter your first name and last name in that order:
Shiv
Dayal
Your name is Shiv Dayal.</d:screen>
<d:para>another run:</d:para>
<d:screen>Enter your first name and last name in that order:
Richard
Stallman
Your name is Richard Stallman.</d:screen>
<d:para>when first if matches but else does not:</d:para>
<d:screen>Enter your first name and last name in that order:
Shiv
Stallman</d:screen>
<d:para>Note the usage of nested if-else. Also, note how
<d:code>strcmp</d:code> has been used to compare two strings and
<d:code>gets</d:code> to read the input. <d:code>gets</d:code> is dangerous but
it is simple that is why has been used here. You can read about it at the link
of opengroup. We will see this in more detail towards the end when we deal with
chapter named C Standard Library.</d:para>
<d:warning>
  <d:title>Assignment in if/else-if</d:title>
  <d:para>Always remember the expression inside if evaluates to a boolean so
  you should never do an ASSIGNMENT inside if and else if as it will always
  evaluate to what is assigned. It can render all your logic meaningless. C is
  not Python, where assignment inside if is not allowed. However, if you assign
  0 to some variable it will evaluate to <d:code>false</d:code>.</d:para>
</d:warning>
<d:sect2>
  <d:title>Dangling else Problem</d:title>
  <d:para>The <d:code>else</d:code> part has a property that it will cling to
  closest if. So the following piece of code may give you surprise:</d:para>
<d:programlisting role="CLexer">if(x==1)
  if(y>2)
    printf("foo\n");
else
  printf("bar\n");</d:programlisting>
<d:para>Now consider <d:code>x!=1</d:code> then you may think that bar will be
printed. However, that will not be the case. The else part clings to inner
if. This can be fixed by using curly braces.</d:para>
</d:sect2>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>switch statement</d:primary>
        </d:indexterm>
	<d:title>switch Statement</d:title>
	<d:para><d:code>switch</d:code> statement is kind of if-else
	replacement to simplify it. Usage of switch statement is to compare one
	expression with others, and then execute a series of sub-statements
	inside case and default based on the result of the comparisons. Note
	that switch statement takes only integers or integreal type as its
	argument and same is valid for its cases. Consider the following
	example:</d:para>
<d:programlisting role="CLexer">//Author: Shiv S. Dayal
//Description : Demo of if-else statements.

#include &lt;stdio.h>

int main()
{
  int i  = 65;

  switch(i)
  {
    case 'A':
      printf("Value of i is 'A'.\n");
      break;
    case 'B':
      printf("Value of i is 'B'.\n");
      break;
    default:
      break;
  }

  return 0;
}</d:programlisting>
and the output is:
<d:screen>Value of i is 'A'.</d:screen>
<d:para>Notice the usage of <d:code>break</d:code>. It is used to terminate
execution once a match has been found for a particular case else what will
happen is shown below:</d:para>
<d:programlisting role="CLexer">//Author: Shiv S. Dayal
//Description : Demo of switch statement.

#include &lt;stdio.h>

int main()
{
  int i  = 65;

  switch(i)
  {
    case 'A':
      printf("Value of i is 'A'.\n");
    case 'B':
      printf("Value of i is 'B'.\n");
    default:
      printf("Value of i is %c.\n", i);
      break;
    }

  return 0;
}</d:programlisting>
and the output is:
<d:screen>Value of i is 'A'.
Value of i is 'B'.
Value of i is A.</d:screen>
<d:para>This is also known as fall through of a <d:code>switch</d:code>
statement. Notice, the use of default that how it is analogous to
<d:code>else</d:code> statement. <d:code>switch</d:code> statements can also be
nested inside each other. However, node that lots of nesting is not good. At
most 2-3 levels are more than enough else you should look at alternative ways
of writing code.</d:para>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>while loop</d:primary>
        </d:indexterm>
	<d:title>while Loop</d:title>
	<d:para>Of three loops I am first going to cover <d:code>while</d:code>
	loop. It is simplest of three. I will just give an example for you to
	understand.</d:para>
	<d:programlisting role="CLexer">//Author: Shiv S. Dayal
//Description : Demo of while statement.

#include &lt;stdio.h>

int main()
{
  int i = 0;

  while(i &lt;= 10)
  {
    printf("%d * %2d = %4d\n", 2, i, 2*i);
    i++;
  }

  return 0;
}</d:programlisting>
and the output is:
<d:screen>2 *  0 =    0
2 *  1 =    2
2 *  2 =    4
2 *  3 =    6
2 *  4 =    8
2 *  5 =   10
2 *  6 =   12
2 *  7 =   14
2 *  8 =   16
2 *  9 =   18
2 * 10 =   20</d:screen>
<d:para><d:code>while</d:code> loop just has one expression which is its
terminating condition. We have written <d:code>i&lt;=10</d:code> which is
terminating condition for our loop. The moment i will become greater than that
the loop will terminated. We are initializing our loop index to 0 and
incrementing within while loop. Note that you must use curly braces for body of
block of loop. If you have only one statement as body of loop then braces are
optional.</d:para>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>do-while loop</d:primary>
        </d:indexterm>
	<d:title>do-while Loop</d:title>
	<d:para>It is very much similar to <d:code>while</d:code> loop but with
	a very subtle difference. Consider the following code:</d:para>
	<d:programlisting role="CLexer">//Author: Shiv S. Dayal
//Description : Demo of do while statement.

#include &lt;stdio.h>

int main()
{
  int i = 0;

  do {
    printf("I am Shiv.\n");
    i++;
  }while(i&lt;5);

  return 0;
}</d:programlisting>
and the output is:
<d:screen>I am Shiv.
I am Shiv.
I am Shiv.
I am Shiv.
I am Shiv.</d:screen>
<d:para>Notice the semicolon at the end of while. Now time for that subtle
difference:</d:para>
<d:programlisting role="CLexer">//Author: Shiv S. Dayal
//Description : Demo of do while statement.

#include &lt;stdio.h>

int main()
{
  int i = 10;

  do {
    printf("2 * 10 = 20\n");
    i++;
  }while(i&lt;5);

  return 0;
}</d:programlisting>
and the output is:
<d:screen>2 * 10 = 20</d:screen>
<d:para>Notice how <d:code>do while</d:code> loop executes once even if the loop index is more than the terminating condition in the while part.</d:para>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>for loop</d:primary>
        </d:indexterm>
	<d:title>for Loop</d:title>
	<d:para><d:code>for</d:code> loop is the last of loops and most
	versatile. It has three parts: initialization of loop counters,
	terminating condition, and loop index modification. If you declare a
	variable in the initialization part then that variable has just loop
	scope while for <d:code>while</d:code> and <d:code>do while</d:code>
	loop indices have at least outer block scope. This makes
	<d:code>for</d:code> loop better. Consider the following example for
	computing squares of numbers:</d:para>
<d:programlisting role="CLexer">//Author: Shiv S. Dayal
//Description : Demo of for statement.

#include &lt;stdio.h>

int main()
{
  for(int i=1, j=1; (i&lt;=10)||(j&lt;=10); i++, j++)
    printf("%2d * %2d = %4d\n", i, j, i*j);

  return 0;
}</d:programlisting>
and the output is:
<d:screen>1 *  1 =    1
2 *  2 =    4
3 *  3 =    9
4 *  4 =   16
5 *  5 =   25
6 *  6 =   36
7 *  7 =   49
8 *  8 =   64
9 *  9 =   81
10 * 10 =  100</d:screen>
<d:para>Notice how various things are coming in picture here: initialization,
terminating conditions loop counter incrementation and output formatting. Here
is how you can write an infinite for loop <d:code>for(;;)</d:code>. You can
write an infinite loop anywhere if your loop index counters are not getting
incremented/decremented properly or your termination condition is
incorrect. Also, always make sure that loop indices are initialized. As an
exercise you can try to implement this program using <d:code>while</d:code> and
<d:code>do while</d:code> loop. Last line of the above output is not having
first space properly.</d:para>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>break statement</d:primary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>continue statement</d:primary>
        </d:indexterm>
	<d:title>break and continue Statements</d:title>
	<d:para><d:code>break</d:code> statement breaks out of innermost
	<d:code>for, do, while</d:code> and <d:code>switch</d:code>
	statements. It terminates that loop. Consider for example:</d:para>
	<d:programlisting role="CLexer">//Author: Shiv S. Dayal
//Description : Demo of break statement.

#include &lt;stdio.h>

int main()
{

  for(int i = 0;;i +=10)
  {
    if(i>100)
      break;
    printf("%d\n", i);
  }

  return 0;
}</d:programlisting>
and the output is:
<d:screen>0
10
20
30
40
50
60
70
80
90
100</d:screen>
<d:para>Notice how the <d:code>for</d:code> loop is terminated once
<d:code>i</d:code> goes beyond 100 even though there is no terminating
condition. Try the same in <d:code>while</d:code> and <d:code>do-while</d:code>
loop and produce the same result.</d:para>
<d:para><d:code>continue</d:code> statement is slightly different than
<d:code>break</d:code> in the sense that it does not stop the execution of that
loop but simply does not execute remaining instructions of that block. Consider
for example:</d:para>
<d:programlisting role="CLexer">//Author: Shiv S. Dayal
//Description : Demo of continue statement.

#include &lt;stdio.h>

int main()
{

  for(int i = 0;i&lt;=100;i +=10)
  {
    if(i==50)
      continue;
    printf("%d\n", i);
  }

  return 0;
}</d:programlisting>
and the output is:<d:screen>0
10
20
30
40
60
70
80
90
100</d:screen>
<d:para>Notice how 50 is missing from output.</d:para>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>typedef statement</d:primary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>return statement</d:primary>
        </d:indexterm>
	<d:title>typedef and return Statements</d:title>
	<d:para><d:code>typedef</d:code> statement is used to define new types
	from existing types. For example:</d:para>
<d:programlisting role="CLexer">typedef char s8;
typedef unsigned char s8;
typedef short int s16;
typedef unsigned short int u16;</d:programlisting>
<d:para>You will be seeing its usage in function pointers, structures and
unions heavily.</d:para>
<d:para><d:code>return</d:code> statement is used to return from
function. Optionally you can return a value.</d:para>
      </d:sect1>
  <d:sect1>
    <d:title>goto statement</d:title>
    <d:para>
      <d:code>goto</d:code> statement allows you to jump to a label within a
      function unconditionally. This leads to arbitrary control flow and in a
      big function you
      can loose track where the code is leading you to. In fact many coding
      standards forbid the usage of <d:code>goto</d:code> statement. Sometimes
      you can use to break out of several level of nested loops but you can use
      certain techniques to come out of nested loops to break out of
      them. Consider the following program:
      <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>

int main()
{
  int i = 0;
  
  goto EXIT;

  printf("Will not be printed\n");
  
EXIT:
  printf("This is where goto will lead you to.\n");

  return 0;
}]]>
      </d:programlisting>
      and the output is:
    </d:para>
    <d:screen>This is where goto will lead you to.
    </d:screen>
    <d:para>
      One of the usage of <d:code>goto</d:code> is to simulate the
      functionality of loops. That is easy to understand because a CPU does not
      have any instructions for looping. Rather, loop statements are translated
      to comparison and jump instructions.
    </d:para>
    <d:para>
      Consider we have two nested <d:code>for</d:code> loops which run from 0
      to 9 and we want to break out when outer loop's counter is 5 and inner
      loop's counter is 7 the we can use <d:code>goto</d:code> as given below:
    </d:para>
    <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>

int main()
{
  for(int i=0; i<10; ++i)
  {
    for(int j=0; j<10; ++j)
    {
      if((i == 5) && (j == 7))
      {
        printf("i = %d and j = %d\n", i, j);
        goto EXIT;
      }
    }
  }

EXIT:

  return 0;
}]]>
    </d:programlisting>
    <d:para>
      and the output is:
    </d:para>
    <d:screen>i = 5 and j = 7
    </d:screen>
    <d:para>
      However, it is possible to break out of such nested loops using a flag
      variable as shown below:
    </d:para>
    <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>
#include <stdbool.h>

int main()
{
  bool flag = false;

  for(int i=0; i<10; ++i)
  {
    for(int j=0; j<10; ++j)
    {
      printf("i = %d and j = %d\n", i, j);
      if((i == 5) && (j == 7))
      {
        printf("i = %d and j = %d\n", i, j);
        flag = true;
        break;
      }
    }
    if(flag)
      break;
  }

  return 0;
}]]>
    </d:programlisting>
    <d:para>
      and the output is:
    </d:para>
    <d:screen>i = 0 and j = 0
i = 0 and j = 1
i = 0 and j = 2
i = 0 and j = 3
i = 0 and j = 4
i = 0 and j = 5
i = 0 and j = 6
i = 0 and j = 7
i = 0 and j = 8
i = 0 and j = 9
i = 1 and j = 0
i = 1 and j = 1
i = 1 and j = 2
...
i = 5 and j = 1
i = 5 and j = 2
i = 5 and j = 3
i = 5 and j = 4
i = 5 and j = 5
i = 5 and j = 6
i = 5 and j = 7
i = 5 and j = 7
    </d:screen>
    <d:para>
      This simple technique can be used to break out of several levels of
      nested loops.
    </d:para>
  </d:sect1>
  <d:sect1>
    <d:title>Examples</d:title>
    <d:para>
      Now that we have studied control flow and operators and expressions we
      can write simple but very interesting programs. Given below are few
      examples.
    </d:para>
    <d:sect2>
      <d:title>Implementing a loop using goto statement</d:title>
      <d:para>
        As said above a CPU typically does not have loop instructions but a
        loop is translated into comparison, increment/decrement and jump
        instructions. Thus, a loop can be implemented using <d:code>goto,
        if</d:code> and increment/decrement statements and operators. Consider
        the following program which prints 1 to 10.
        <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>

int main()
{
  for(int i=1; i<11; ++i)
    printf("%d\n", i);

  return 0;
}]]>
        </d:programlisting>
      </d:para>
      <d:para>and the output is easy to guess:</d:para>
      <d:screen>1
2
3
4
5
6
7
8
9
10
      </d:screen>
      <d:para>
        Now let us see the converted program:
      </d:para>
      <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>

int main()
{
  int i = 1;

LOOP:
  printf("%d\n", i);
  ++i;
  if(i!= 11)
    goto LOOP;

  return 0;
}]]>
      </d:programlisting>
      <d:para>
        and the output is same as above which you can easily verify.
      </d:para>
    </d:sect2>
    <d:sect2>
      <d:title>Printing Various Patterns</d:title>
      <d:para>
        Consider we want to print following pattern:
        <d:screen>    *
   ***
  *****
 *******
*********
        </d:screen>
        then how would you print it. It is a very easy program and I will just
        give you the solution. First try to do it yourself and use the solution
        if you cannot do it to learn from it.
      </d:para>
      <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>
 
int main()
{
  unsigned int c = 0, n = 0, temp = 0;
 
  printf("Enter the number of rows in the pattern: ");
  scanf("%u",&n);
 
  temp = n;
 
  for (int row = 1; row <= n; row++)
  {
    for (c = 1; c < temp; c++)
      printf(" ");
 
    temp--;
 
    for ( c = 1 ; c <= 2*row - 1 ; c++ )
      printf("*");
 
    printf("\n");
  }
 
   return 0;
}]]>
      </d:programlisting>
      <d:para>
        and one of the outputs is:
      </d:para>
      <d:screen>Enter the number of rows in the pattern: 10
         *
        ***
       *****
      *******
     *********
    ***********
   *************
  ***************
 *****************
*******************
      </d:screen>
      <d:para>
        Another simple pattern may look like:
      </d:para>
      <d:screen>*
**
***
****
*****
******
      </d:screen>
      <d:para>
        This is even easier than previous one. Try to do it on your own before
        seeing the solution given below:
      </d:para>
      <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>
 
int main()
{
  int n=0;
 
  printf("Enter number of rows\n");
  scanf("%d",&n);
 
  for(int c=1 ; c<=n; c++)
  {
    for(int k=1 ; k<=c ; k++ )
      printf("*");
 
    printf("\n");
  }
  
  return 0;
}]]>
      </d:programlisting>
      <d:para>
        and the output may look like:
      </d:para>
      <d:screen>Enter number of rows
10
*
**
***
****
*****
******
*******
********
*********
**********
      </d:screen>
    </d:sect2>
    <d:sect2>
      <d:title>Printing Pascal's triangle</d:title>
      <d:para>
        Pascal's triangle is discussed in great detail at <d:link
        xlink:href="https://en.wikipedia.org/?title=Pascal%27s_triangle">Pascal's
        Triangle</d:link>. To start with let us look at a small Pascal triangle.
      </d:para>
      <d:screen>   1
  1 1
 1 2 1
1 3 3 1
      </d:screen>
      <d:para>
        The rows in Pascal's triangle start at 0(say we use <d:emphasis
        role="italic">n</d:emphasis> to denote it) and 
        columns start at 0 as well. We can pick either left end or right end
        that does not matter because it is symmetric at the center. Since we
        are used to writing left-to-right in English let us pick the first
        column is at left most end is say <d:emphasis
        role="italic">k</d:emphasis> starting from 0. Now the number at any
        position is <d:inlineequation><math
        xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msup><mi></mi><mi>n</mi></msup><msub><mi>C</mi><mi>k</mi></msub></mrow></math></d:inlineequation>
        in Pascal's triangle. However, it is not necessary to compute each and
        every element. As we know <d:inlineequation><math
        xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msup><mi></mi><mi>n</mi></msup><msub><mi>C</mi><mi>0</mi></msub></mrow></math></d:inlineequation>
        and <d:inlineequation><math
        xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msup><mi></mi><mi>n</mi></msup><msub><mi>C</mi><mi>n</mi></msub></mrow></math></d:inlineequation>
        are 1 each thus both the edges will always be 1. So for 0th row <d:inlineequation><math
        xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msup><mi></mi><mi>0</mi></msup><msub><mi>C</mi><mi>0</mi></msub></mrow></math></d:inlineequation>
        is the only element while for the first row it is <d:inlineequation><math
        xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msup><mi></mi><mi>1</mi></msup><msub><mi>C</mi><mi>0</mi></msub></mrow></math></d:inlineequation>
        and <d:inlineequation><math
        xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msup><mi></mi><mi>1</mi></msup><msub><mi>C</mi><mi>1</mi></msub></mrow></math></d:inlineequation>
        which both evaluates to 1 thus 1st row is 1 1. Now from basics of
        permutation and combination it follows that <d:inlineequation><math
        xmlns="http://www.w3.org/1998/Math/MathML"><mmultiscripts><mi>C</mi><mi>k</mi><none/><mprescripts/><none/><mi>n</mi></mmultiscripts><mo>=</mo><mmultiscripts><mi>C</mi><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow><none/><mprescripts/><none/><mrow><mi>n</mi><mo>-</mo><mn>1</mn></mrow></mmultiscripts><mo>+</mo><mmultiscripts><mi>C</mi><mi>k</mi><none/><mprescripts/><none/><mrow><mi>n</mi><mo>-</mo><mn>1</mn></mrow></mmultiscripts></math></d:inlineequation>.
        Thus, new elements of a new line except for the edges can be figured
        from the previous line. For example, 2nd row will contain 3 elements
        with two edge-elements being 1. Now the middle element is
        <d:inlineequation>
          <math
              xmlns="http://www.w3.org/1998/Math/MathML"><mmultiscripts><mi>C</mi><mn>1</mn><none/><mprescripts/><none/><mn>2</mn></mmultiscripts></math>
        </d:inlineequation>
        which can be simply presented as sum of
        <d:inlineequation>
          <math xmlns="http://www.w3.org/1998/Math/MathML"><mmultiscripts><mi>C</mi><mn>0</mn><none/><mprescripts/><none/><mn>1</mn></mmultiscripts><mo>+</mo><mmultiscripts><mi>C</mi><mn>1</mn><none/><mprescripts/><none/><mn>1</mn></mmultiscripts></math>
        </d:inlineequation>
        which are two elements of 1st row. Now to computer 3rd row elements we
        can follow the same process. The edge elements will be 1 each while the
        other two elements are
        <d:inlineequation>
          <math xmlns="http://www.w3.org/1998/Math/MathML"><mmultiscripts><mi>C</mi><mn>1</mn><none/><mprescripts/><none/><mn>3</mn></mmultiscripts></math>
        </d:inlineequation>
        and
        <d:inlineequation>
          <math xmlns="http://www.w3.org/1998/Math/MathML"><mmultiscripts><mi>C</mi><mn>2</mn><none/><mprescripts/><none/><mn>3</mn></mmultiscripts></math>
          </d:inlineequation>. Now,
          <d:inlineequation>
            <math xmlns="http://www.w3.org/1998/Math/MathML"><mmultiscripts><mi>C</mi><mn>1</mn><none/><mprescripts/><none/><mn>3</mn></mmultiscripts></math>
          </d:inlineequation>
          can be obtained by adding
          <d:inlineequation>
            <math xmlns="http://www.w3.org/1998/Math/MathML"><mmultiscripts><mi>C</mi><mn>0</mn><none/><mprescripts/><none/><mn>2</mn></mmultiscripts></math>
          </d:inlineequation>
          and
          <d:inlineequation>
            <math xmlns="http://www.w3.org/1998/Math/MathML"><mmultiscripts><mi>C</mi><mn>1</mn><none/><mprescripts/><none/><mn>2</mn></mmultiscripts></math>
          </d:inlineequation>
          i.e. 1 and 2 respectively which results in 3. Similarly, the next
          element will also result in 3. Thus 3rd row is 1 3 3 1. Similarly, we
          can computer the next row with ease which will be 1 4 6 4 1 and next
          row to that will be 1 5 10 10 5 1. Let us write a simple program to
          print Pascal's triangle based on these observations:
        </d:para>
        <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>
 
int main()
{
  unsigned int n = 0;
 
  printf("Enter the number of rows in the Pascal's triangle: ");
  scanf("%u",&n);
 
  unsigned long a[n], b[n];
  
  a[0] = b[0] = b[1] = 1;

  printf("%lu\n", a[0]);
  printf("%lu %lu\n", b[0], b[1]);

  unsigned long *x = a, *y = b;
  unsigned long *temp;
  
  for(unsigned long i = 2; i<n; ++i) {
    // set edge values
    x[0] = 1;
    x[i] = 1;
    printf("%lu ", x[0]);
    for(unsigned long j = 1; j<i; ++j) {
      x[j] = y[j - 1] + y[j];
      printf("%lu ", x[j]);
    }
    printf("%lu\n", x[i]);

    // swap pointers for arrays
    temp = x;
    x = y;
    y = temp;
  }
  return 0;
}]]>
        </d:programlisting>
        <d:para>
          I have not tried to make the output beautiful because with changing
          input the output has to adjusted. Thus the formatting changes will
          destroy the beauty of this simple program. The output may look like
          below:
        </d:para>
        <d:screen>1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
1 5 10 10 5 1
1 6 15 20 15 6 1
1 7 21 35 35 21 7 1
1 8 28 56 70 56 28 8 1
1 9 36 84 126 126 84 36 9 1
        </d:screen>
    </d:sect2>
  </d:sect1>
</d:chapter>
