<d:chapter version="5.0" xmlns:d="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:mml="http://www.w3.org/1998/Math/MathML">
  <?xml-stylesheet href="../css/style.css" type="text/css"?>
    <?dbhtml filename="oae/index.html" ?>
      <d:title>Operators and Expressions</d:title>
      <d:para>
        Operators and expressions are in the core of every programming
        language. They form the major part of BNF grammar. They also decide how
        the syntax will look like. You as a programmer will spend considerable
        time using C operators. C has sevral type of operators like arithmetic
        operators, relational operators, bitwise operators, unary operators,
        logical operators to name some of them. Since C was first of very
        poopular structured general-pupose lnguages therefore many modern
        language use almost all the operators and supplement with their own. It
        is needless to say that to become a good programmar you must know all
        the operators of C and know where to use which one as it may decide
        performance, readability, simplicity of your code. Whenever you see
        array and pointer in following sections just plow through them. All
        will be clear soon.
      </d:para>
      <d:para>
        Before we can proceed to discuss operators and expressions I will
        explain scope, linkage and storage durations which can be applied to
        variables. These are given in specification starting at
        (&#xa7; iso.6.2.1) and ending at &#xa7;(iso.6.2.4).
      </d:para>
      <d:sect1>
        <d:indexterm>
          <d:primary>scope of identifiers</d:primary>
        </d:indexterm>
        <d:title>Scope of an Identifier</d:title>
        <d:para>
          Till now we have seen plain variables and their identifiers. However,
          there are other identifiers as well which will be discussed
          later. For now we will consider scope of plain variables. In general
          there are three kinds of scope. Global scope, function scope and
          block scope. Variables declared outside any function have global
          scope and they persist throughout the lifetime of the
          program. Variables declared inside functions at outermost level have
          function scope and they live as long as function remains active. A
          block in C is marked by braces { and }. Function bodies are also
          marked by this. Here I mean blocks inside a function. Starting from
          C99 you can declare variables anywhere inside a function and this
          block variables which have less lifetime than functions are
          possible. We will see more of these when we see more code. Note that
          identifiers can be reused in different scopes. For example, a loop
          index integer identifier is repeated many times but every time it is
          a new variable(We will see loops soon). Two identifiers have same
          scope if and only if their scope terminates at the same point.
        </d:para>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>linkage of identifiers</d:primary>
        </d:indexterm>
        <d:title>Linkages of an Identifier</d:title>
        <d:para>
          There are three different kinds of linkages. External, internal and
          none. Global variables and functions have external linkage as long as
          they are not static. If they are static then they have internal
          linkage. By external linkage we mean that for a program which
          consists of multiple source code files these functions and variable
          identifiers can be referred in files other than in which they are
          declared. When functions and global variables are static i.e. they
          have internal linkage they cannot be accessed in other source code
          files.
        </d:para>
        <d:para>
          The following identifiers have no linkage: an identifier declared to
          be anything other than an variable or a function; an identifier
          declared to be a function parameter; a block scope identifier for an
          object declared without the storage-class specifier
          <d:code>extern</d:code>.
        </d:para>
      </d:sect1>
      <d:sect1 id="storage">
        <d:indexterm>
          <d:primary>storage duration of objects</d:primary>
        </d:indexterm>
        <d:title>Storage Duration of Objects</d:title>
        <d:para>
          There are four storage durations. Static, thread, automatic and
          allocated. Here, we will not discuss thread which we will talk about
          later. A static variable which is local to a function of global
          variable has static duration and it lives in data segment in memory
          and has static storage duration. A variable local to a function or
          block which is not dynamically allocated on heap by using either of
          <d:code>malloc, calloc</d:code> or <d:code>realloc</d:code> has
          automatic storage and has function or block has automatic storage and
          is cleaned up automatically and it lives on stack. Allocated storage
          duration variables can persist as long as they want after allocation
          on heap by using one of <d:code>malloc, calloc</d:code> and
          <d:code>realloc</d:code> as long as the name is kept in scope and a
          corresponding <d:code>free</d:code> is not called on that name of the
          variable. Now let us discuss operators and expressions.
        </d:para>
        <d:para>
          Whenever operators and expressions come in picture you may have a set
          of mixed data then to perform oration data is converted from one type
          to another. This has an entire section devoted to it in specification
          at (&#xa7; iso.6.3). There are two types of conversions. Many
          operators convert their operands silently which is called
          <d:quote>implicit conversion</d:quote> and then we have cast
          operators which we can use to explicitly convert values from one type
          to another which is called <d:quote>explicit conversion</d:quote>. We
          will first see implicit conversion.
        </d:para>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>usual arithmetic conversions</d:primary>
        </d:indexterm>
        <d:title>Usual Arithmetic Conversions</d:title>
        <d:para>
          Many operators that expect operands of arithmetic type cause
          conversions and yield result types in a similar way. The purpose is
          to determine a common real type for the operands and result. For the
          specified operands, each operand is converted, without change of type
          domain, to a type whose corresponding real type is the common real
          type. Unless explicitly stated otherwise, the common real type is alo
          the corresponding real type of the result, whose type domain is the
          type domian of the operands if they are the same, and complex
          otherwise. This pattern is called the usual <d:emphasis
          role="italic">arithmetic conversions</d:emphasis>:
          <d:itemizedlist>
            <d:listitem>
              First, if the corresponding real type of either operand is
              <d:code>long double</d:code>, the other operand is converted,
              without change of type domain, to a type whose corresponding real
              type is <d:code>long double</d:code>.
            </d:listitem>
            <d:listitem>
              Otherwise, if the corresponding real type of either operand is
              <d:code>double</d:code>, the other operand is converted, without
              change of type domain, to a type whose coreesponding real type is
              <d:code>double</d:code>.
            </d:listitem>
            <d:listitem>
              Otherwise, if the corresponding real type of either operand is
              <d:code>float</d:code>, the other operand is converted, without
              change of type domain, to a type whose coreesponding real type is
              <d:code>float</d:code>.
            </d:listitem>
            <d:listitem>
              Otherwise, the integer promotions are performed on both
              operands. Then the following rules are applied to the promoted
              operands:
              <d:itemizedlist>
                <d:listitem>
                  If both operands have the same type, then no further
                  conversion is needed.
                </d:listitem>
                <d:listitem>
                  Otherwise, if both operands have signed integer types or both
                  have unsigned integer types, the operand with the type of
                  lesser integer conversion rank is converted to the type of
                  the operand with greater rank.
                </d:listitem>
                <d:listitem>
                  Otherwise, if the operand that has unsigned integer type has
                  rank greater or equal to the rank of the type of the other
                  operand, then the operand with signed integer type is
                  converted to the type of the operand with unsigned integer
                  type.
                </d:listitem>
                <d:listitem>
                  Otherwise, if the type of the operand with signed integer
                  type can represent all of the values of the type of the
                  operand with unsigned integer type, then the operand with
                  unsigned integer type is converted to the type of the operand
                  with signed integer type.
                </d:listitem>
                <d:listitem>
                  Otherwise, both operands are converted to the unsigned
                  integer type corresponding to the type of the operand with
                  signed integer type.
                </d:listitem>
              </d:itemizedlist>
            </d:listitem>
            <d:listitem>
              The values of floating operands and of the results of floating
              expressions may be represented in greater precision and range
              than that required by the type; the types are not changed
              thereby.
            </d:listitem>
          </d:itemizedlist>
        </d:para>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>arithmetic operators</d:primary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>+</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>-</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>*</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>/</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>%</d:secondary>
        </d:indexterm>
	    <d:title>Arithmetic Operators</d:title>
	<d:para>
      There are five here. +, -, *, / and %. Let us see a simple
      example:
    </d:para>
	<d:programlisting role="CLexer">// Arithmetic operators
// Description: Demo of arithmetic operators

#include &lt;stdio.h>

int main()
{
  int i = 10;
  float f= 6.45;
  char c = 'A';
  int iResult = 0;
  float fResult = 0.0;
  char cResult = '\0';

  cResult = c + i;
  printf("cResult = %c\n", cResult);
  cResult = cResult - 5;
  printf("cResult = %c\n", cResult);

  iResult = i - 10;
  printf("iResult = %d\n", iResult);
  iResult = i * c;
  printf("iResult = %d\n", iResult);
  iResult = (i + c)/3;
  printf("Result = %d\n", iResult);
  iResult = (i + c)%2;
  printf("iesult = %d\n", iResult);

  fResult = f * 2.12;
  printf("fesult = %f\n", fResult);
  fResult = f - i;
  printf("fesult = %f\n", fResult);
  fResult = f / 1.12;
  printf("fesult = %f\n", fResult);
  fResult = 1 % 3;
  printf("fesult = %f\n", fResult);

  return 0;
}</d:programlisting>
<d:para>and the output is:</d:para>
<d:screen>cResult = K
cResult = F
iResult = 0
iResult = 650
Result = 25
iesult = 1
fesult = 13.674000
fesult = -3.550000
fesult = 5.758928
fesult = 1.000000</d:screen>
<d:para>
  First <d:code>cResult</d:code> is sum of <d:code>'A' + i</d:code> which
  is <d:code>'K'</d:code> as <d:code>'K'</d:code> comes ten positions after A in
  ASCII table. Then we subtract five and go back to F.
</d:para>
<d:para>
  First <d:code>iReasult</d:code> is 10 - <d:code>i</d:code> where value
  of <d:code>i</d:code> is 10 hence result is 0. Next we multiply it with
  <d:code>i</d:code> which contains <d:code>'A'</d:code> who has got ASCII value
  of 65 and result becomes 650. Then We take sum of <d:code>'A'</d:code> and
  <d:code>i</d:code> and divide by 3 so the result is 25 as it is a division of
  75 by 3. Next we use modulus operator and remainder is 1. Note that in case of
  / and % if denominator is zero the behavior is undefined.
</d:para>
<d:para>
  You should be careful when using * or / with + or - because * and / have
  higher priority than + or -. For example, 2+3*4 will evaluate for 14 while
  you may have intended it for 20. In such cases it is mandatory to override
  the precedence using parentheses like (2+3)*4. / with two integral operands
  cause integer devision and remainder is lost. To
  obtain remainder you can use % operator which is also known as modulus or mod
  operator.
</d:para>
<d:para>
  Same way you can udnerstand floating-point operations. Note that you
  cannot use modulus operator if either of the operands are floating-point
  numbers as it will make no sense because of data type promotion rules. Here
  data type promotion rule says smaller data types will be converted to bigger
  data types. Also, if there is a data type on left side of assignment the result
  of applying the operator to operands will be converted to the type of
  that. chars are promoted to ints, ints are promoted to floats anf floats to
  double. The point is that conversion will try to keep as much data as
  possible.
</d:para>
<d:para>
  You should be also careful while choosing your data types. For example, if
  you take two short integers and add them then the sum may overflow the range
  of short integers. For example, <d:code>short int si1= 100; short int
  si2=100;</d:code> will fit nicely in short integer range because sum is 200
  but then if it goes beyond 32,767 then it will overflow and will become
  either a zero or a negative number. In such cases you can cast short integers
  to a larger data type like <d:code>int</d:code> and put sum their. You can
  see it as a disadvantage as you have to be very careful about what your data
  type has to be. In previous example if you know that the two short int
  operands' sum is going to fit in a short int then you can use a short int for
  sum for sure. But since you may not know who will be using your program most
  of the time and user input can never be trusted it is always better to
  program defensively.
</d:para>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>relational operators</d:primary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>&lt;</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>&gt;</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>&lt;=</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>&gt;=</d:secondary>
        </d:indexterm>
	<d:title>Relational Operators</d:title>
	<d:para>There are four relational operators: &lt;, >, &lt;= and
	>=. Let us see an
	example:</d:para>
<d:programlisting role="CLexer">// Author : Shiv S. Dayal
// Description : Demo of relational operator

#include &lt;stdio.h>
#include &lt;stdbool.h>

int main()
{
  int i = 4, j = 5;
  _Bool result = 0;

  result = i &lt; j;
  printf("%d\n", result);

  result = i > j;
  printf("%d\n", result);

  result = i &lt;= j;
  printf("%d\n", result);

  result = i >= j;
  printf("%d\n", result);

  return 0;
}</d:programlisting>
<d:para>and the output is:</d:para>
<d:screen>1
0
1
0</d:screen>
<d:para>
  The result of a relational operator is a boolean value which can be either
  <d:code>true</d:code> or <d:code>false</d:code> depending upon the operator
  and its operands.
</d:para>
<d:para>
  Note that you should not apply these to close floating-point data types
  as they may not be represented correctly and two different entities have the
  same internal representation.
</d:para>
<d:para>For example, consider the following program:</d:para>
<d:programlisting role="CLexer"><![CDATA[#include <stdio.h>

int main()
{
  float f1=1.00000199999;
  float f2=1.000002;

  printf("%.20f %.20f\n", f1, f2);
  printf("%d\n", f1<f2);
  printf("%d\n", f1>f2);
  printf("%d\n", f1==f2);

  return 0;
}]]>
</d:programlisting>
<d:para>
  and the output is:
</d:para>
<d:screen>1.00000202655792236328 1.00000202655792236328
0
0
1
</d:screen>
<d:para>
  As you can clearly see the comparison output is definitely wrong and with
  good reason. Since floating point numbers are valid till sixth digit of
  precision the two floating point numbers compare equal when tested using the
  equality operator <d:code>==</d:code> which you will see soon. However, two
  floating point numbers can be compared with great degree of accuracy and more
  so with <d:code>double</d:code> data type. Consider the program with same
  data as above but with <d:code>double</d:code> as data type.
</d:para>
<d:programlisting role="CLexer"><![CDATA[#include <stdio.h>

int main()
{
  double d1=1.00000199999;
  double d2=1.000002;

  printf("%.20f %.20f\n", d1, d2);
  printf("%d\n", d1<d2);
  printf("%d\n", d1>d2);
  printf("%d\n", d1==d2);

  return 0;
}]]>
</d:programlisting>
<d:para>and the output is:</d:para>
<d:screen>1.00000199999000005668 1.00000200000000005751
1
0
0
</d:screen>
<d:para>
  As you can see our result is correct. However, if the two doubles would have
  been very-very close it would suffer the same fate as previous program and
  give wrong output.
</d:para>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>equality operators</d:primary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>==</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>!=</d:secondary>
        </d:indexterm>
	<d:title>Equality Operators</d:title>
	<d:para>There are two equlity operators == and !=. </d:para>
	<d:programlisting role="CLexer">// Author : Shiv S. Dayal
// Description : Demo of equality operator

#include &lt;stdio.h>
#include &lt;stdbool.h>
int main()
{
  int i = 4, j = 5;
  _Bool result = 0;

  result = i == j;
  printf("%d\n", result);

  result = i != j;
  printf("%d\n", result);

  return 0;
}</d:programlisting>
<d:para>and the output is:</d:para>
<d:screen>0
1</d:screen>
<d:para>
  The equality operator <d:code>==</d:code> test for equality for its two
  operands and <d:code>!=</d:code> tests for the operands not being equal. The
  result of comparison is boolean value. For <d:code>==</d:code> if the
  operands are equal then result is <d:code>true</d:code> else
  <d:code>false</d:code>. For <d:code>!=</d:code> the result is
  <d:code>true</d:code> if the operands do not compare equal and
  <d:code>false</d:code> if they compare unequal.
</d:para>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>increment operator</d:primary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>decrement operator</d:primary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>prefix increment</d:primary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>postfix increment</d:primary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>prefix decrement</d:primary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>postfix decrement</d:primary>
        </d:indexterm>
	<d:title>Increment and Decrement Operators</d:title>
	<d:para>
      There is one increment and one decrement operator. ++ and
	  --. Both come in two forms prefix and postfix. First we will see prefix
	  versions then postfix ones. There is only one constraint on prefix
	  operators of these and that is the operand of the prefix increment or
	  decrement operator will have qualified or unqualified real or pointer
	  type and will be a modifiable lvalue. The prefix operator is usually more
      efficient as compared to postfix operators but that may not be true
      always.
    </d:para>
	<d:programlisting role="CLexer">// Author : Shiv S. Dayal
// Description : Demo of increment decrement operators

#include &lt;stdio.h>

int main()
{
  float f = 7.123;

  printf("%f\n", ++f);
  printf("%f\n", --f);
  printf("%f\n", f++);
  printf("%f\n", f--);
  printf("%f\n", f);

  return 0;
}</d:programlisting>
<d:para>and the output is:</d:para>
<d:screen>8.123000
7.123000
7.123000
8.123000
7.123000</d:screen>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>logical operators</d:primary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>&amp;&amp;</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>||</d:secondary>
        </d:indexterm>
	<d:title>Logical Operators</d:title>
	<d:para>There are two such operators. &amp;&amp; logical AND and ||
	locical OR. Both the operators have the same constraints and it is that
	both the operands will have scalar type.</d:para>
	<d:para>The &amp;&amp; operator gives 1 if both the operands are
	non-zero else 0. The result type is int. It is different from bitwise
	&amp; operator in the sense that it guarantess left-to-right
	evaluation; if the second operand is evaluated, there is a sequence
	point between the evaluations of the first and second operands. If the
	first operand is 0 then the second operand is not evaluated. This is
	known as “short-circuit evaluation”.</d:para>
	<d:para>The || operator gives 1 if any of operands are non-zero else it
	gives 0. Same as logical AND operator and unlike bitwise | operator it
	guarantees left-to-right evaluation and same goes for sequence
	points. If first operand is non-zero, the second is not
	evaluated.</d:para>
<d:programlisting role="CLexer">// Author : Shiv S. Dayal
// Description : Demo of logical AND &amp; OR operators

#include &lt;stdio.h>
#include &lt;stdbool.h>

int main()
{
  int i = 4, j = 5, k = 0;
  bool result;

  result = i&amp;&amp;j;
  printf("%d\n", result);

  result = i||j;
  printf("%d\n", result);

  result = k&amp;&amp;j;
  printf("%d\n", result);

  result = k||j;
  printf("%d\n", result);

  return 0;
}</d:programlisting>
<d:para>and the output is:</d:para>
<d:screen>1
1
0
1</d:screen>
<d:para>note the use of <d:code>bool</d:code> here instead of
<d:code>_Bool</d:code>.</d:para>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>bitwise operators</d:primary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>&amp;</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>|</d:secondary>
        </d:indexterm>        
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>^</d:secondary>
        </d:indexterm>
	<d:title>Bitwise Operators</d:title>
	<d:para>
      There are three bitwise operators. &amp;, |, and ^. AND, OR and
	  EX-OR respectively. OR is also called inclusive OR. These have the same
	  constraints and it is that operands should be integer types. The usual
	  arithmetic conversions are performed on the operands. It is not hard to
      understand why it cannot be applied to floating-point if you remember the
      floating point number representation.
    </d:para>
    <d:programlisting role="CLexer">// Author : Shiv S. Dayal
// Description : Demo of bitwise operators

#include &amp;stdio.h>
#include &amp;stdbool.h>

int main()
{
  int i = 4, j = 5;
  int result;

  result = i&amp;j;
  printf("%d\n", result);

  result = i|j;
  printf("%d\n", result);

  result = i^j;
  printf("%d\n", result);

  return 0;
}</d:programlisting>
<d:para>and the output is:</d:para>
<d:screen>4
5
1</d:screen>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>bitwise shift operators</d:primary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>&lt;&lt;</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>&gt;&gt;</d:secondary>
        </d:indexterm>
	<d:title>Bitwise Shift Operators</d:title>
	<d:para>The constraint is same as other bitwise operators that operands
	should be integers. The integer promotions are performed on each of the
	operands. The type of the result if that of the promoted left
	operand. If the value of the right operand is negative or is greater
	than or equal to the width of the promoted left operand, the behavior
	is undefined.</d:para>
<d:programlisting role="CLexer">// Author : Shiv S. Dayal
// Description : Demo of shift operators

#include &lt;stdio.h>

int main()
{
  int i  = 4;
  char c ='A';
  int result;

  result = c&lt;&lt;i;
  printf("%d\n", result);

  result = c>>i;
  printf("%d\n", result);

  return 0;
}</d:programlisting>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>assignment operators</d:primary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>=</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>*=</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>/=</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>%=</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>+=</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>-=</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>&lt;&lt;=</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>&gt;&gt;=</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>&amp;=</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>^=</d:secondary>
        </d:indexterm>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>|=</d:secondary>
        </d:indexterm>
	<d:title>Assignment Operators</d:title>
	<d:para>These are <d:code>=, *=, /=, %=, +=, -=, &lt;&lt;=, >>=, &amp;=,
  ^=</d:code> and <d:code>|=</d:code> The only
	constraint is that left operand should be modifiable lvalue. An
	assignment operator stores a value in the object designated by the left
	operand. An assignment expression has the value of the left operand
	after the assignment, but is not an lvalue. The type of an assignment
	expression is the type of the left operand unless the left operand has
	qualified type, in which case it is the unqualified version of the type
	of the left operand. The side effect of updating the stored value of
	the left operand is sequenced after the value computations of the left
	and right operands. The evaluations of the operands are
	unsequenced.</d:para>
    <d:para>
      These are shortcuts for more elaborate expressions. For example,
      <d:code>a += b;</d:code> simply means <d:code>a = a +
      b;</d:code>. Similar analogy can be drawn to other compound assignment
      operators.
    </d:para>
<d:programlisting role="CLexer">// Author: Shiv S. Dayal
// Description: Demo of compound assignments.

#include &lt;stdio.h>

int main()
{
  int i   = 3;
  int j   = 3;
  float f = 4.7;
  float result=0.0;

  result += i+f;
  printf("%f\n", result);

  result -= f;
  printf("%f\n", result);

  j &lt;&lt;= i;
  printf("%d\n", j);

  return 0;
}</d:programlisting>
<d:para>and the output is:</d:para>
<d:screen>7.700000
3.000000
24</d:screen>
      </d:sect1>
      <d:sect1>
	<d:title>Conditional Operators</d:title>
<d:programlisting role="CLexer">// Author : Shiv S. Dayal
// Description : Demo of conditional operator

#include &lt;stdio.h>

int main()
{
  int i = (4 &lt; 5)? 7:10;

  printf("%d\n", i);

  return 0;
}</d:programlisting>
<d:para>output is 7 as 4 is less than 5 which is true.</d:para>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>,</d:secondary>
        </d:indexterm>
	<d:title>Comma Operator</d:title>
	<d:para>It is a very simple operator. The left operand of a comma
	operator is evaluated as a void expression; there is a sequence point
	between its evaluation and that of the right operand. Then the right
	operand is evaluated; the result has its type and value. A comma
	operator does not give an lvalue. Consider the following program:</d:para>
<d:programlisting role="CLexer"><![CDATA[#include <stdio.h>

int main()
{
  int i;

  i = 1, 2;
  printf("%d\n", i);

  i = (1, 2);
  printf("%d\n", i);
  return 0;
}]]></d:programlisting>
<d:para>
  and the output is:
<d:screen>1
2</d:screen>
as you can see since command operator has least priority(refer to table given
below) for first assignment the output has value 1 but then we can override the
priority and the value of comma operator i.e. right-most operand gets assigned
to <d:code>i</d:code>.
</d:para>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>operator</d:primary>
          <d:secondary>sizeof</d:secondary>
        </d:indexterm>
	<d:title>sizeof Operator</d:title>
	<d:para>You have already see sizeof operator in second chapter when we
	saw sizes of data types. However here is the constraint: the sizeof
	operator will not be applied to an expression that has function type or
	an incomplete type, to the parenthesized name of such a type, or to an
	expression that designates a bit-field member.</d:para>
	<d:para>The sizeof operator yields the size (in bytes) of its operand,
	which may be an expression or the parenthesized name of a type. The
	size is determined from the type of the operand. The result is an
	integer. If the type of the operand is a variable length array type,
	the operand is evaluated; otherwise, the operand is not evaluated and
	the result is an integer constant.</d:para>
	<d:para>When applied to an operand that has type char, unsigned char,
	or signed char, (or a qualified version thereof) the result is 1. When
	applied to an operand that has array type, the result is the total
	number of bytes in the array. When applied to an operand that has
	structure or union type, the result is the total number of bytes in
	such an object, including internal and trailing padding.</d:para>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>unary arithmetic operators</d:primary>
        </d:indexterm>
	<d:title>Unary Arithmetic Operators</d:title>
	<d:para>We will see casting, array subscripting, function parenthes,
	address and indirection operators later at appropriate time. For now I
	am going to tell you about operator precedence and associativity and
	then about grouping parenthes. Given below is the table for operator
	precedence and associativity, however, you may not be familiar with few
	of them but later you will be:</d:para>
	<d:table frame="border" class="leftcenter"
          border="1">
	  <d:colgroup width="0*"/>
	  <d:colgroup width="0*"/>
          <d:caption>Priority and associativity table</d:caption>
          <d:thead>
            <d:tr bgcolor="#aaaaaa">
              <d:th>Operators</d:th>
              <d:th>Associativity</d:th>
            </d:tr>
          </d:thead>
	  <d:tr>
	    <d:td>() [] . -> ++ – (postfix)</d:td>
	    <d:td>left-to-right</d:td>
	  </d:tr>
	  <d:tr>
	    <d:td>++ – + - (unary) ! ~ (types) * &amp; sizeof</d:td>
	    <d:td>right-to-left</d:td>
	  </d:tr>
	  <d:tr>
	    <d:td>* / %</d:td>
	    <d:td>left-to-right</d:td>
	  </d:tr>
	  <d:tr>
	    <d:td>+ - (Addition/Subtraction)</d:td>
	    <d:td>left-to-right</d:td>
	  </d:tr>
	  <d:tr>
	    <d:td>&lt;&lt; >></d:td>
	    <d:td>left-to-right</d:td>
	  </d:tr>
	  <d:tr>
	    <d:td>&lt; > &lt;= >=</d:td>
	    <d:td>left-to-right</d:td>
	  </d:tr>
	  <d:tr>
	    <d:td>== !=</d:td>
	    <d:td>left-to-right</d:td>
	  </d:tr>
	  <d:tr>
	    <d:td>&amp;</d:td>
	    <d:td>left-to-right</d:td>
	  </d:tr>
	  <d:tr>
	    <d:td>^</d:td>
	    <d:td>left-to-right</d:td>
	  </d:tr>
	  <d:tr>
	    <d:td>|</d:td>
	    <d:td>left-to-right</d:td>
	  </d:tr>
	  <d:tr>
	    <d:td>&amp;&amp;</d:td>
	    <d:td>left-to-right</d:td>
	  </d:tr>
	  <d:tr>
	    <d:td>||</d:td>
	    <d:td>left-to-right</d:td>
	  </d:tr>
	  <d:tr>
	    <d:td>Assignemnt operators</d:td>
	    <d:td>right-to-left</d:td>
	  </d:tr>
	  <d:tr>
	    <d:td>,</d:td>
	    <d:td>left-to-right</d:td>
	  </d:tr>
	</d:table>
    <d:para>
      We have already seen unary prefix and postfix versions of increment and
      decrement operators earlier. There are some more unary operators like
      <d:code>+, -, ~</d:code> and <d:code>!</d:code>.
    </d:para>
    <d:para>
      <d:code>+</d:code> and <d:code>-</d:code> are applied to arithmetic
      types. <d:code>+</d:code> does not change the value of operand but
      promotions are applied to the type if required. For example, an integer
      can be promoted to long integer. <d:code>-</d:code> on the other hand
      negates the value of operand and again promotions are applicable.
    </d:para>
    <d:para>
      Operator <d:code>~</d:code> results in bitwise complement of the
      operand. For example, consider following program:
    </d:para>
    <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>

int main()
{
  int i = 0;

  printf("%d\n", ~i);
  printf("%d\n", ~1);

  return 0;
}]]>
    </d:programlisting>
    <d:para>
      and the output is:
      <d:screen>-1
-2
      </d:screen>
      Since <d:code>i</d:code> is 0 i.e. all bits are 0 thus when we negate it
      all bits become 1 and result is -1.
    </d:para>
    <d:para>
      Operator <d:code>!</d:code> tests whether a value is
      <d:code>false</d:code> or <d:code>true</d:code>. If it is
      <d:code>true</d:code> and <d:code>!</d:code> is applied then result is
      <d:code>false</d:code> and reverse is also applicable. Since all values
      in C other than 0 and <d:code>NULL</d:code> pointer is considered
      <d:code>true</d:code> thus applying <d:code>!</d:code> for other than
      these two results in <d:code>false</d:code> boolean value.
    </d:para>
      </d:sect1>
      <d:sect1>
        <d:indexterm>
          <d:primary>grouping parentheses</d:primary>
        </d:indexterm>
	<d:title>Grouping parentheses</d:title>
	<d:para>Grouping parentheses are used to override operator precedence
	and group expressions. NEVER EVER try to memorize and rely on
	precedence of operators. Always use grouping parentheses. Till now I
	have shown very simple examples of operators; here are some complex
	ones:</d:para>
	<d:programlisting role="CLexer">// Author: Shiv Shankar Dayal
// Description: Demo of grouping parentheses

#include &lt;stdio.h>

int main()
{
  printf("%f\n", 5.2*(3.7+2.3));
  printf("%d\n", ((4&lt;5)||(7^5)));

  return 0;
}
  </d:programlisting>
  <d:para>
    This small program shows you what can go wrong if you rely on
    memory. It allows you do addition first and then multiplcation. Inner
    parentheses are evaluated first then outer ones. This concludes our chapter
    on operators and expressions. Next we focus on control statements and flow
    statements.
  </d:para>
  <d:para>
    Another simple example which I did not give for comma operator deliberately
    to explain comma operator and parentheses in conjunction is given below:
    <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>

int main()
{
	int i;

	i = 1, 2;
	printf("%d\n", i);

	i = (1, 2);
	printf("%d\n", i);

	return 0;
}]]>
    </d:programlisting>
    and the output is quite simple:
    <d:screen>1
2
    </d:screen>
  </d:para>
  <d:para>
    Now as we know from precedence table given above that comma operator has
    least priority thus for <d:code>i = 1, 2;</d:code> even though it evaluates
    to 2 the assignment will happen first and 1 is stored in
    <d:code>i</d:code>. However, when we use parentheses to override the
    precedence the comma operator gets higher precedence and we get 2 as value
    of <d:code>i</d:code>.
  </d:para>
      </d:sect1>
    </d:chapter>
