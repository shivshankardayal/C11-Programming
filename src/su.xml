<d:chapter version="5.0" xmlns:d="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:mml="http://www.w3.org/1998/Math/MathML">
  <?xml-stylesheet href="../css/style.css" type="text/css"?>
  <?dbhtml filename="su/index.html" ?>
  <d:title>Structures and Unions</d:title>
  <d:indexterm>
    <d:primary>structures</d:primary>
  </d:indexterm>
  <d:indexterm>
    <d:primary>unions</d:primary>
  </d:indexterm>
  <d:para>
    So far what we have seen are data types defiend by the language
    itself. However, there are times when these simple types are not
    enough. For example, to describe physical properties of a human being you
    can have various attributes. These can be age, weight and height. All three
    are representable using arithmetic types. For other properties
    like name, children, marital status, education, address, phone nnumber
    again arithmetic and string types can be used. Thus to represent detail of
    human being we need several variables. We can always operate on these
    variables individually but it is cumbersome. The second problem is even
    though these attributes represent one entity they are not coupled. From a
    programmers perspective the problem is somewhere else. Suppose you want to
    pass all these attributes to a function then how would you pass. You will
    have to pass each and every property to the function which is operating on
    the attributes. For example, you are trying to get admission in college and
    the program which records your data has a function which stores all these
    in a database. Now the function which willl store these attributes in
    database will have a large and ugly signature because of lots of variables
    representing these attributes will have to be passed. Thus a better way
    would be to somehow combine these separate attributes into one single
    variable. For this C has defined two types which can be defined by the user 
    or programmer. The two keywords are struct and union. A structure or union
    is basically a composite type. These may consist of one more types of
    C. That is they may contain one or more basic types like int, char etc or
    other structures or unions. Consider following examples:
  </d:para>
  <d:programlisting role="CLexer">struct {
  int i;
  char c;
  int* p;
  char* s;
} mystruct;

struct {
  int x;
  struct mystruct S;
  } another_struct;

union {
  int i;
  char c;
  int* p;
  char8 s;
} myunion;

union {
  int x;
  union myunion S;
} another_union;
  </d:programlisting>
  <d:para>
    As you see from the declarations there is no difference between
    structures and unions. However, there is a subtle
    difference. Consider following program:
  </d:para>
  <d:programlisting role="CLexer">// Author: Shiv Shankar Dayal
// Description: Difference between strutures and unions.

#include &lt;stdio.h>

typedef struct {
  int i;
  double d;
} mystruct;

typedef union {
  int i;
  double d;
} myunion;

int main()
{
  mystruct s;
  myunion u;

  printf("Size of structure is %d\n", sizeof(s));
  printf("Size of union is %d\n", sizeof(u));

  return 0;
}
  </d:programlisting>
  and the output is:
  <d:screen>Size of structure is 12
Size of union is 8
  </d:screen>
  <d:para>
    Before explaining the output let me tell you this that using
    typedef is mandatory here to get the <d:code>sizeof</d:code>
    operator working. If you try something like
    <d:code>sizeof(struct mystruct);</d:code> then you will get this
    as error. <d:code>invalid application of sizeof to incomplete
    type struct mystruct.</d:code> However, you can use an object of
    <d:code>struct mystruct</d:code>.
  </d:para>
  <d:indexterm>
    <d:primary>typedef</d:primary>
  </d:indexterm>
  <d:para>
    By using <d:code>typedef</d:code> we let the compiler recognize
    them as complete types. Now let us see the output. Size of
    structure is simple. It is equal to size of an integer plus size
    of a double. However, size of union is equal to size of
    double. Basically, size of a structure is equal to size of all
    its elements. For unions size of union is equal to size of
    biggest element. This means that elements for a union overlap on
    the same memory area. We can use this fact to write a very
    clever program. Before writing the program let me give you some
    background.
  </d:para> 
  <d:para>
    There is something called endianness of a machine. What it means that
    how bytes are stored. If a machine is little endian like most intel
    processors then the bytes are stoerd in reverse order. What this means
    that they are not in there natural order. On big endian machines like PPC
    architecture the bytes are in natural order. In other words if the least
    significant byte of an integer is stored at the lowest memory address
    then it is called little-endian. If the least significant byte is stored
    at the highest address then it is called big-endian. For example my
    machine is intel so let us see what output we get from this
    program.
  </d:para> 
  <d:programlisting role="CLexer">//Author: Shiv S. Dayal
//Description: Demo of endianness,

#include &lt;stdio.h>

typedef union {
  short int i;
  char c;
} myunion;

int main()
{
  myunion u;

  u.i = 258;

  printf("%d\n", u.c);

  return 0;
}
  </d:programlisting>
  and the output is:
  <d:screen>2</d:screen>
  <d:para>
    So as you can see the extra 2 i.e. 258 - 256 is getting stored in c. Now
    2 is the high order byte. Hence we can conclude that my machine is
    little-endian.
  </d:para>
  <d:para>
    More ways to initialize a structure are given below:
  </d:para>
  <d:programlisting role="CLexer">//Author: Shiv S. Dayal
//Description: Structure initialization

#include &lt;stdio.h>

typedef struct {
  short int i;
  char c;
} mystruct;

int main()
{
  mystruct s1 = {34, 'c'}, s2;

  s2.i = 43;
  s2.c = 'e';

  printf("%d %d %c %c\n", s1.i, s2.i, s1.c, s2.c);

  return 0;
}
  </d:programlisting>
  and the output is:
  <d:screen>34 43 c e</d:screen>
  <d:sect1>
    <d:indexterm>
      <d:primary>pointer members of structures</d:primary>
    </d:indexterm>
    <d:title>Pointer members of a Structure</d:title>
    <d:para>
      Sometime structures will contain pointer members. Obviously, you will
      have to allocate memory to them or point them to some existing variable's
      address. Let us see how this is done.
    </d:para>
    <d:programlisting role="CLexer">//Author:Shiv S. Dayal
//Descrition: Pointer members of a structure

#include &lt;stdio.h>
#include &lt;stdlib.h>

int main()
{
  typedef struct {
    int* i;
    int j;
  }s;

  s* s1;

  s1 = (s*)malloc(sizeof(s));
  s1->i=(int*)4;
  s1->j=5;

  printf("s1->i=%p s1->j=%d\n", s1->i, s1->j);

  return 0;
}
    </d:programlisting>
    and the output is:
    <d:screen>s1->i=0x4 s1->j=5</d:screen>
    <d:para>
      You might be wondering why I have casted (<d:code>int*</d:code>) to 4 and
      used a <d:code>%p</d:code> format specifier. The reason is
      <d:code>*i</d:code> is a pointer to an interger and hence
      <d:code>s1->i</d:code> is a pointer and will accept only an integer
      pointer. Therefore, casting is mandatory else you will get a
      warning. Again, at the time of assignment I have assigned value 4 which
      is an address actully. Therefore <d:code>%p</d:code> is needed for
      conversion. However, this program is a bad, wrong program to death. The
      reason is the address 4 may be out of programâ€™s segmenst and touching it
      in the sense of trying to read from it or write to it may doom your
      day. Try to burn your hands. Let us see the correct version.
    </d:para>
    <d:programlisting role="CLexer">//Author:Shiv S. Dayal
//Descrition: Pointer members of a structure

#include &lt;stdio.h>
#include &lt;stdlib.h>

int main()
{
  typedef struct {
    int* i;
    int j;
  }s;

  s* s1;

  s1 = (s*)malloc(sizeof(s));
  s1->i = (int*)malloc(sizeof(int));
  *(s1->i) = 4;
  s1->j = 5;

  printf("s1->i = %d s1->j = %d\n", *(s1->i), s1->j);

  return 0;
}
    </d:programlisting>
    and the output is:
    <d:screen>s1->i=4 s1->j=5</d:screen>
  </d:sect1>
  <d:sect1>
  <d:indexterm>
    <d:primary>usage of structures</d:primary>
  </d:indexterm>
  <d:indexterm>
    <d:primary>usage of unions</d:primary>
  </d:indexterm>
  <d:title>Usage of Structures and Unions</d:title>
  <d:para>
    A structure can be used to represent rather complex entities. For example,
    a car. Consider a car. It has weight, power, cost, mileage etc. All this
    can be combined and represented as a structure. Structures can be
    categorized in two categories. One will be normal structures and second is
    seld-referential structures. Self-referential structures contain a pointer
    to a structure of its own type. You will see its usage in the book when we
    deal with data structures. We have already shown you normal structures. The
    data members of a structure are referenced using . operator or -> if they
    are pointer type as we have already seen. The rule of using structures or
    unions is simple. When you cannot represent any entity using provided data
    types then combine the basic entities and use them in an structure or
    union. Union has one distiction which you already know. Consider you know
    that your entity can have multiple type of values but only one at a
    time. Then you can use unions.
  </d:para>
  <d:para>
    Structures and unions can be nested as well. I will just give a
    simple example and leave rest to your imagination and previously told
    facts.
  </d:para>
  <d:programlisting role="CLexer">#include &lt;stdio.h>

typedef struct {
  int j;
}t;

typedef struct{
  int i;
  t t1;
}s;

int main()
{
  s s1;

  s1.i=4;
  s1.t1.j=5;

  printf("%d %d", s1.i, s1.t1.j);

return 0;
}
  </d:programlisting>
  and the output is:
  <d:screen>4 5</d:screen>
  <d:para>
    Structures and unions can be used to transfer data over network where the
    exact data being carried can be indicated by an extra variable. Consider
    following example:
  </d:para>
  <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>
#include <stdlib.h>
 
int main()
{
  typedef struct{
    char type;
    union u{
      char c;
      int i;
      float f;
      double d;
    }u;
  }s;

  s s1;

  s1.type = 'i';
  s1.u.i = 10;

  printf("%c %d\n", s1.type, s1.u.i);
  
  return 0;
}]]>
  </d:programlisting>
  <d:para>and the output is:</d:para>
  <d:screen>i 10</d:screen>
  <d:para>
    Now if the use case is that only one of elements has to be transferred over
    network for example then union can be used to store the value while the
    type variable can be used to store the type of value stored in union. One
    more use of such a structure is to create heterogeneous data structures
    where various different type of data types can be stored. For example, a
    linked list can be created which can store different numerical data types.
  </d:para>
  </d:sect1>
  <d:sect1>
    <d:indexterm>
      <d:primary>structures and arrays</d:primary>
    </d:indexterm>
    <d:title>Structures and Arrays</d:title>
    <d:para>
      There are two posiibilities here. Structures containing arrays and arrays
      of structure. Let us see an example which combines both:
    </d:para> 
    <d:programlisting role="CLexer">//Author: Shiv S. Dayal
//Description: Arrays as structure elements

#include &lt;stdio.h>

typedef struct {
  int i[2];
}ais;

int main()
{
  ais a[2];

  a[0].i[0] = 1;
  a[0].i[1] = 2;
  a[1].i[0] = 3;
  a[1].i[1] = 4;

  printf("%d %d %d %d\n", a[0].i[0], a[0].i[1], a[1].i[0], a[1].i[1]);

  return 0;
}
    </d:programlisting>
    and the output is:
    <d:screen>1 2 3 4</d:screen>
  </d:sect1>
  <d:sect1>
    <d:title>Passing Structures to Functions</d:title>
    <d:para>
      Since structures typically represent complex objects thus they are bigger
      than numerical or string data types. And it is a no-brainer that since
      stack space is small structures should be passed to functions by address
      as that is most efficient in terms of memory. Do not pass structures as
      value as far as possible because you will be not only consuming precious
      stack memory but since a copy has to be made for pass by value it will be
      inefficient as well. The syntax of passing structures by address is same
      as other data types.
    </d:para>
  </d:sect1>
  <d:sect1>
    <d:title>Bit Fields</d:title>
    <d:para>
      We typically address bytes in day-today programming but there are cases
      when we need to address individual bits. Though we cannot take address
      of individual bits we can still access them. Also, in embedded systems
      where memory is low structures and unions allow compact packing of bits
      using bit fields. Although booleans can give us true/false but booleans
      end up using one byte while bit fields occupy in bits. Consider following
      example:
    </d:para>
    <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>
#include <stdlib.h>
 
int main()
{
  typedef struct {
    unsigned int i1:1;
    unsigned int i2:2;
  }s;

  s s1;

  printf("%zu\n", sizeof(s));

  s1.i1 = 1;
  s1.i2 = 3;

  printf("%u %u\n", s1.i1, s1.i2);
  
  typedef struct {
    int i1:1;
    int i2:2;
  }t;

  t t1;

  t1.i1 = 1;
  t1.i2 = 3;

  printf("%d %d\n", t1.i1, t1.i2);
  
  return 0;
}]]>
    </d:programlisting>
    <d:para>and the output is:</d:para>
    <d:screen>4
1 3
-1 -1
    </d:screen>
    <d:para>
      Both structures <d:code>s</d:code> and <d:code>t</d:code> will occupy
      only 3 bits in memory. Look carefully as the syntax of bit-fields
      <d:code>i1</d:code> and <d:code>i2</d:code> which occupy 1 and 2 bits
      respectively. Because of alignment size of each of the structures is
      reported as 4 bytes. What this means is that you can stuff 29 more bits
      worth of bit-fields more without incrementing the size of
      structures. However, once you will put more than 32-bits the size of
      structure will again increase by 4 bytes.
    </d:para>
    <d:para>
      The second point is easy to understand that why output is -1 for both the
      members of structure <d:code>s</d:code> and <d:code>t</d:code>. Since the
      bit-fields are signed integer having width 1 and 2 the ranges will be
      from <d:inlineequation><math
      xmlns="http://www.w3.org/1998/Math/MathML"><mo>-</mo><msup><mn>2</mn><mrow><mn>1</mn><mo>-</mo><mn>1</mn></mrow></msup></math></d:inlineequation>
      to <d:inlineequation><math
      xmlns="http://www.w3.org/1998/Math/MathML"><msup><mn>2</mn><mrow><mn>1</mn><mo>-</mo><mn>1</mn></mrow></msup><mo>-</mo><mn>1</mn></math></d:inlineequation>
      which is -1 to 0 and <d:inlineequation><math
      xmlns="http://www.w3.org/1998/Math/MathML"><mo>-</mo><msup><mn>2</mn><mrow><mn>2</mn><mo>-</mo><mn>1</mn></mrow></msup></math></d:inlineequation>
      to <d:inlineequation><math
      xmlns="http://www.w3.org/1998/Math/MathML"><msup><mn>2</mn><mrow><mn>2</mn><mo>-</mo><mn>1</mn></mrow></msup><mo>-</mo><mn>1</mn></math></d:inlineequation>
      which is -2 to 1. Thus in 2's complement form 1 and 3 will get converted
      to -1 in both the cases.
    </d:para>
    <d:para>
      Even more fun is bit-fields in unions because of possible overlap in
      memory. Since memory for different variables overlap in unions one byte
      can be used to represent different bits and 8 possible different values
      can be represented. Such a union is typically used a bit-mask in several
      function calls. For example, mode in <d:code>open</d:code> system call is
      a bit-mask. Given below is example of one such bit mask:
    </d:para>
    <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>
#include <stdlib.h>
 
int main()
{
  typedef union {
    unsigned int i1:1;
    unsigned int i2:2;
    unsigned int i3:3;
    unsigned int i4:4;
    unsigned int i5:5;
    unsigned int i6:6;
    unsigned int i7:7;
    unsigned int i8:8;
  }bit_mask;

  bit_mask b;

  b.i1 = 1;
  b.i2 = 1|2;
  b.i3 = 1|2|4;
  b.i4 = 1|2|4|8;
  b.i5 = 1|2|4|8|16;
  b.i6 = 1|2|4|8|16|32;
  b.i7 = 1|2|4|8|16|32|64;
  b.i8 = 1|2|4|8|16|32|64|128;

  printf("%zu\n", sizeof(bit_mask));
  printf("%u %u %u %u %u %u %u %u\n", b.i1, b.i2, b.i3, b.i4, b.i5, b.i6, b.i7, b.i8);

  if(b.i1 && 1)
    puts("Bit 1 is set.");
  if(b.i2 && 2)
    puts("Bit 2 is set.");
  if(b.i3 && 4)
    puts("Bit 3 is set.");
  if(b.i4 && 8)
    puts("Bit 4 is set.");
  if(b.i5 && 16)
    puts("Bit 5 is set.");
  if(b.i6 && 32)
    puts("Bit 6 is set.");
  if(b.i7 && 64)
    puts("Bit 7 is set.");
  if(b.i8 && 128)
    puts("Bit 8 is set.");
  
  return 0;
}]]>
    </d:programlisting>
    <d:para>and the output is:</d:para>
    <d:screen>4
1 3 7 15 31 63 127 255
Bit 1 is set.
Bit 2 is set.
Bit 3 is set.
Bit 4 is set.
Bit 5 is set.
Bit 6 is set.
Bit 7 is set.
Bit 8 is set.
    </d:screen>
  </d:sect1>
  <d:sect1>
    <d:title>Offset of Elements</d:title>
    <d:para>
      As we have studied earlier that alignment is putting elements on
      addresses which are multiple of their storages. Thus it can be confusing
      where each element is actually located inside a structure. This
      information is needed when you actually want to examine memory. To find
      out the offset of these elements there is a macro
      <d:code>offsetof</d:code> defined in <d:xref linkend="stddef"
      />. Consider following example:
    </d:para>
    <d:programlisting role="CLexer"><![CDATA[#include <stdio.h>
#include <stddef.h>
 
int main()
{
  typedef struct{
    char c;
    int i;
    char d;
    char a[31];
    long double ld;
  }s;

  printf("%zu %zu %zu %zu %zu\n", offsetof(s, c), offsetof(s, i), offsetof(s, d), offsetof(s, a), offsetof(s, ld));
  
  return 0;
}]]>
    </d:programlisting>
    <d:para>and the output is:</d:para>
    <d:screen>0 4 8 9 48</d:screen>
    <d:para>
      What this means is <d:code>char c</d:code> is located at position 0 and
      <d:code>int i</d:code> at position 4 that means 3 bytes are for padding.
      <d:code>char d</d:code> is located immediately after <d:code>int
      i</d:code>. Array <d:code>char a[31]</d:code> is located immediately
      after <d:code>char d</d:code>. Now from position 9 i.e. byte 9, 31
      continuous bytes. Thus occupying till 40th byte. Now <d:code>long double
      ld</d:code> cannot be put on 41st so positions 41 to 47 are padded and it
      is stored at position 48.
    </d:para>
  </d:sect1>
</d:chapter>
