<d:chapter version="5.0" xmlns:d="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:mml="http://www.w3.org/1998/Math/MathML">
  <?xml-stylesheet href="../css/style.css" type="text/css"?>
    <?dbhtml filename="assert/index.html" ?>
    <d:title>Diagnostics &lt;assert.h&gt;</d:title>
    <d:para>The header <d:code>&lt;assert.h&gt;</d:code> defines the assert
    macro and refers to another macro, <d:code>NDEBUG</d:code> which is not
    defined by code <d:code>&amp;lt;assert.h></d:code>. If
    <d:code>NDEBUG</d:code> is defined as a macro name at the point in the
    source file where <d:code>&amp;lt;assert.h></d:code> is included, the
    <d:code>assert</d:code> macro is defined simply as:</d:para>
<d:programlisting role="CLexer">#define assert(ignore) ((void)0)</d:programlisting>
<d:para>The <d:code>assert</d:code> macro is redefined according to the current
state of <d:code>NDEBUG</d:code> each time that
<d:code>&amp;lt;assert.h></d:code> is included.</d:para>
<d:para>The  Macro<d:code>assert</d:code> shall be implemented as a macro, not
as an actual function. If the macro definition is suppressed in order to access
an actual function, the behavior is undefined.</d:para>
<d:sect1>
  <d:title>Program Diagnostics</d:title>
  <d:sect2>
    <d:title>The assert Macro</d:title>
    <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
    <d:programlisting role="CLexer">#include &lt;assert.h>
void assert(scalar expression);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>assert</d:code> macro puts diagnostic tests into programs;
it expands to a <d:code>void</d:code> expression. When it is executed, if
expression (which shall have a scalar type) is <d:code>false</d:code> (that is,
compares equal to 0), the <d:code>eassert</d:code> macro writes information
about the particular call that failed (including the text of the argument, the
name of the source file, the source line number, and the name of the enclosing
function - the latter are respectively the values of the preprocessing macros
<d:code>e__FILE__</d:code> and <d:code></d:code> and of the identifier
<d:code>__func__</d:code>) on the standard error stream in an
implementation-defined format. It then calls the <d:code>abort</d:code>
function.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>assert</d:code> macro returns no value.</d:para>
<d:para><d:emphasis role="bold">Forward references:</d:emphasis> the
<d:code>abort</d:code> function (20.4.1).</d:para>
<d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
<d:programlisting role="CLexer">#include &amp;lt;assert.h>
void assert(scalar expression);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>If the macro <d:code>NDEBUG</d:code> was defined at the moment
&amp;lt;assert.h> was last included, the macro <d:code>assert()</d:code>
generates no code, and hence does nothing at all. Otherwise, the macro
<d:code>assert()</d:code> prints an error message to standard error and
terminates the program by calling <d:code>abort</d:code> if expression is false
(i.e., compares equal to zero).</d:para>
<d:para>The purpose of this macro is to help the programmer find bugs in his
program. The message "assertion failed in file foo.c, function do_bar(), line
1287" is of no help at all to a user.</d:para>
<d:para><d:emphasis role="bold">Return Value</d:emphasis></d:para>
<d:para>No value is returned.</d:para>
<d:para>In C89, expression is required to be of type int and undefiend behavior
results if it is not, but in C99 it may have scalar type.</d:para>
<d:para><d:code>assert()</d:code> is implemented as a macro; if the expression
tested hasside-effects, program behavior will be different depending on whether
<d:code>NDEBUG</d:code> is defined. This may create Heisenbugs which go away
whendebugging is turned on.</d:para>
<d:para><d:emphasis role="bold">Example</d:emphasis></d:para>
<d:programlisting role="CLexer">#include &lt;stdio.h>
#include &lt;assert.h>

int main()
{
  assert(0);
  printf("Not gonna happen!");

  return 0;
}</d:programlisting>
and the output is:
<d:screen>a.out: test.c:5: int main(): Assertion `0' failed.
Aborted (core dumped)</d:screen>
<d:para>You should replace 0 inside assert() by the expression to be
tested.</d:para>
  </d:sect2>
</d:sect1>
</d:chapter>
