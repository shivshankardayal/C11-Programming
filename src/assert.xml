<d:chapter version="5.0" xmlns:d="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:mml="http://www.w3.org/1998/Math/MathML" id="diagnostics">
  <?xml-stylesheet href="../css/style.css" type="text/css"?>
  <?dbhtml filename="assert/index.html" ?>
  <d:title>Diagnostics &lt;assert.h&gt;</d:title>
  <d:para>
    The header <d:code>&lt;assert.h&gt;</d:code> defines the
    <d:code>assert</d:code> and <d:code>static_assert</d:code> macros and
    refers to another macro,
    <d:indexterm>
      <d:primary>NDEBUG macro</d:primary>
    </d:indexterm>
    <d:blockquote>
      <d:para>
        <d:code>NDEBUG</d:code>
      </d:para>
    </d:blockquote>
    which is not defined by <d:code>&lt;assert.h&gt;</d:code>. If
    <d:code>NDEBUG</d:code> is defined as a macro name at the point in the
    source file where <d:code>&lt;assert.h&gt;</d:code> is included, the
    <d:code>assert</d:code> macro is defined simply as
    <d:blockquote>
      <d:para>
        <d:code>#define assert(ignore) ((void)0)</d:code>
      </d:para>
    </d:blockquote>
    The <d:code>assert</d:code> macro is redefined according to the current
    state of <d:code>NDEBUG</d:code> each time that
    <d:code>&lt;assert.h&gt;</d:code> is included.
  </d:para>
  <d:para>
    The <d:code>assert</d:code> macro shall be implemented as a macro, not as
    an actual function. If the macro definition is suppressed in order to
    access an actual function, the behavior is undefined.
  </d:para>
  <d:para>
    The macro
    <d:blockquote>
      <d:para><d:code>static_assert</d:code></d:para>
    </d:blockquote>
    expands to <d:code>_Static_assert</d:code>.
  </d:para>
<d:sect1>
  <d:title>Program Diagnostics</d:title>
  <d:sect2>
    <d:indexterm>
      <d:primary>__FILE__</d:primary>
    </d:indexterm>
    <d:indexterm>
      <d:primary>macro</d:primary>
      <d:secondary>assert</d:secondary>
    </d:indexterm>
    <d:title>The assert Macro</d:title>
    <d:para><d:emphasis role="bold">Synopsis</d:emphasis></d:para>
    <d:programlisting role="CLexer">#include &lt;assert.h>
void assert(scalar expression);</d:programlisting>
<d:para><d:emphasis role="bold">Description</d:emphasis></d:para>
<d:para>The <d:code>assert</d:code> macro puts diagnostic tests into programs;
it expands to a <d:code>void</d:code> expression. When it is executed, if
expression (which shall have a scalar type) is <d:code>false</d:code> (that is,
compares equal to 0), the <d:code>assert</d:code> macro writes information
about the particular call that failed (including the text of the argument, the
name of the source file, the source line number, and the name of the enclosing
function - the latter are respectively the values of the preprocessing macros
<d:code>e__FILE__</d:code> and <d:code></d:code> and of the identifier
<d:code>__func__</d:code>) on the standard error stream in an
implementation-defined format.<d:footnote><d:para>The message written might be
of the form:</d:para><d:para><d:code>Assertion
failed:</d:code> <d:emphasis role="italic">expression</d:emphasis>,
<d:code>function</d:code> <d:code>abc</d:code>, <d:emphasis
role="italic">file</d:emphasis> <d:code>xyz</d:code>, <d:code>line</d:code>
<d:emphasis role="italic">nnn</d:emphasis>.</d:para></d:footnote> It then calls
the <d:code>abort</d:code>
function.</d:para>
<d:para><d:emphasis role="bold">Returns</d:emphasis></d:para>
<d:para>The <d:code>assert</d:code> macro returns no value.</d:para>
<d:para><d:emphasis role="bold">Forward references:</d:emphasis> <d:xref
linkend="abort" /></d:para>
<d:para><d:emphasis role="bold">Example</d:emphasis></d:para>
<d:programlisting role="CLexer">#include &lt;stdio.h>
#include &lt;assert.h>

int main()
{
  assert(0);
  printf("Not gonna happen!");

  return 0;
}</d:programlisting>
and the output is:
<d:screen>a.out: test.c:5: int main(): Assertion `0' failed.
Aborted (core dumped)</d:screen>
<d:para>You should replace 0 inside assert() by the expression to be
tested.</d:para>
  </d:sect2>
</d:sect1>
</d:chapter>
